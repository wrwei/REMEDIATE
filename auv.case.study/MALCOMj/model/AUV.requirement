<?xml version="1.0" encoding="UTF-8"?>
<requirement_:RequirementPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:requirement_="http://www.sawg.org/requirement">
  <name content="AUV Requirement Package"/>
  <description>
    <content>
      <value content=""/>
    </content>
  </description>
  <requirementAsset xsi:type="requirement_:RequirementPackage" gid="RP1">
    <name content="AUV Overall Requirement Package"/>
    <description>
      <content>
        <value content="The AUV (Autonomous Underwater Vehicle) is a portable untethered remotely operated vehicle, equipped with a visual mapping system and verified on-board autonomy.&#xD;&#xA;The AUV is capable of conducting light intervention tasks, such as cathodic protection surveys (oil and gas) and simple coring (offshore), with potential to move to more complex interventions in a later phase, such as valve turning.&#xD;&#xA;"/>
      </content>
    </description>
    <externalReference>
      <location content="location"/>
      <type content="type"/>
      <metadata content="metadata"/>
      <version content="version"/>
      <implementationConstraint>
        <content>
          <value content="Constraint"/>
        </content>
      </implementationConstraint>
    </externalReference>
    <requirementAsset xsi:type="requirement_:NonFunctionalRequirement" gid="SD1" priority="6">
      <name content="SD1"/>
      <description>
        <content>
          <value content="The AUV system is developed as a Module named &quot;AUV_Module&quot;."/>
        </content>
      </description>
      <externalReference>
        <location content="location"/>
        <type content="type"/>
        <metadata content="metadata"/>
        <version content="version"/>
        <implementationConstraint>
          <content>
            <value content="Constraint"/>
          </content>
        </implementationConstraint>
      </externalReference>
      <type architecture="true"/>
    </requirementAsset>
    <requirementAsset xsi:type="requirement_:NonFunctionalRequirement" gid="SD2" priority="6">
      <name content="SD2"/>
      <description>
        <content>
          <value content="&quot;AUV_Module&quot; should contain a Robotic Platform named &quot;AUV_Platform&quot;, it should use the Interfaces &quot;Sensors&quot; and &quot;Actuators&quot;."/>
        </content>
      </description>
      <externalReference>
        <location content="location"/>
        <type content="type"/>
        <metadata content="metadata"/>
        <version content="version"/>
        <implementationConstraint>
          <content>
            <value content="Constraint"/>
          </content>
        </implementationConstraint>
      </externalReference>
      <type architecture="true"/>
    </requirementAsset>
    <requirementAsset xsi:type="requirement_:NonFunctionalRequirement" gid="SD3" priority="6">
      <name content="SD3"/>
      <description>
        <content>
          <value content="&quot;AUV_Module&quot; should contain a Controller named &quot;AUV_Operator&quot;, it should use the Interface &quot;Inputs&quot;."/>
        </content>
      </description>
      <externalReference>
        <location content="location"/>
        <type content="type"/>
        <metadata content="metadata"/>
        <version content="version"/>
        <implementationConstraint>
          <content>
            <value content="Constraint"/>
          </content>
        </implementationConstraint>
      </externalReference>
      <type architecture="true"/>
    </requirementAsset>
    <requirementAsset xsi:type="requirement_:NonFunctionalRequirement" gid="SD4" priority="6">
      <name content="SD4"/>
      <description>
        <content>
          <value content="&quot;AUV_Module&quot; should contain a Controller named &quot;LRE_Ctrl&quot; (for Last Response Engine), it should use the Interfaces &quot;Inputs&quot; and &quot;Outputs&quot;."/>
        </content>
      </description>
      <externalReference>
        <location content="location"/>
        <type content="type"/>
        <metadata content="metadata"/>
        <version content="version"/>
        <implementationConstraint>
          <content>
            <value content="Constraint"/>
          </content>
        </implementationConstraint>
      </externalReference>
      <type architecture="true"/>
    </requirementAsset>
    <requirementAsset xsi:type="requirement_:NonFunctionalRequirement" gid="SD5" priority="6">
      <name content="SD5"/>
      <description>
        <content>
          <value content="&quot;AUV_Module&quot; should contain a Controller named &quot;AUV_Autopilot&quot;, it should use the Interface &quot;Outputs&quot;."/>
        </content>
      </description>
      <externalReference>
        <location content="location"/>
        <type content="type"/>
        <metadata content="metadata"/>
        <version content="version"/>
        <implementationConstraint>
          <content>
            <value content="Constraint"/>
          </content>
        </implementationConstraint>
      </externalReference>
      <type architecture="true"/>
    </requirementAsset>
    <requirementAsset xsi:type="requirement_:NonFunctionalRequirement" gid="PT1" priority="6">
      <name content="PT1"/>
      <description>
        <content>
          <value content="The &quot;AUV_Platform&quot; should define a Primitive Type named &quot;nat&quot; (for natural numbers)."/>
        </content>
      </description>
      <externalReference>
        <location content="location"/>
        <type content="type"/>
        <metadata content="metadata"/>
        <version content="version"/>
        <implementationConstraint>
          <content>
            <value content="Constraint"/>
          </content>
        </implementationConstraint>
      </externalReference>
      <type architecture="true"/>
    </requirementAsset>
    <requirementAsset xsi:type="requirement_:NonFunctionalRequirement" gid="PT2" priority="6">
      <name content="PT2"/>
      <description>
        <content>
          <value content="The &quot;AUV_Platform&quot; should define a Primitive Type named &quot;int&quot; (for integers)."/>
        </content>
      </description>
      <externalReference>
        <location content="location"/>
        <type content="type"/>
        <metadata content="metadata"/>
        <version content="version"/>
        <implementationConstraint>
          <content>
            <value content="Constraint"/>
          </content>
        </implementationConstraint>
      </externalReference>
      <type architecture="true"/>
    </requirementAsset>
    <requirementAsset xsi:type="requirement_:NonFunctionalRequirement" gid="PT3" priority="6">
      <name content="PT3"/>
      <description>
        <content>
          <value content="The &quot;AUV_Platform&quot; should define a Primitive Type named &quot;string&quot; (for string values)."/>
        </content>
      </description>
      <externalReference>
        <location content="location"/>
        <type content="type"/>
        <metadata content="metadata"/>
        <version content="version"/>
        <implementationConstraint>
          <content>
            <value content="Constraint"/>
          </content>
        </implementationConstraint>
      </externalReference>
      <type architecture="true"/>
    </requirementAsset>
    <requirementAsset xsi:type="requirement_:NonFunctionalRequirement" gid="PT4" priority="6">
      <name content="PT4"/>
      <description>
        <content>
          <value content="The &quot;AUV_Platform&quot; should define a Primitive Type named &quot;boolean&quot; (for boolean values)."/>
        </content>
      </description>
      <externalReference>
        <location content="location"/>
        <type content="type"/>
        <metadata content="metadata"/>
        <version content="version"/>
        <implementationConstraint>
          <content>
            <value content="Constraint"/>
          </content>
        </implementationConstraint>
      </externalReference>
      <type architecture="true"/>
    </requirementAsset>
    <requirementAsset xsi:type="requirement_:NonFunctionalRequirement" gid="PT5" priority="6">
      <name content="PT5"/>
      <description>
        <content>
          <value content="The &quot;AUV_Platform&quot; should define a Primitive Type named &quot;real&quot; (for real numbers)."/>
        </content>
      </description>
      <externalReference>
        <location content="location"/>
        <type content="type"/>
        <metadata content="metadata"/>
        <version content="version"/>
        <implementationConstraint>
          <content>
            <value content="Constraint"/>
          </content>
        </implementationConstraint>
      </externalReference>
      <type architecture="true"/>
    </requirementAsset>
    <requirementAsset xsi:type="requirement_:NonFunctionalRequirement" gid="CT1" priority="6">
      <name content="CT1"/>
      <description>
        <content>
          <value content="The &quot;AUV_Platform&quot; should define a Composite Type named &quot;SVec&quot; (Spherical Vector), to record values such as &quot;radial&quot; (of type &quot;real&quot;), &quot;polar&quot; (of type &quot;real&quot;), and &quot;azimuth&quot; (of type &quot;real&quot;)."/>
        </content>
      </description>
      <externalReference>
        <location content="location"/>
        <type content="type"/>
        <metadata content="metadata"/>
        <version content="version"/>
        <implementationConstraint>
          <content>
            <value content="Constraint"/>
          </content>
        </implementationConstraint>
      </externalReference>
      <type architecture="true"/>
    </requirementAsset>
    <requirementAsset xsi:type="requirement_:NonFunctionalRequirement" gid="CT2" priority="6">
      <name content="CT2"/>
      <description>
        <content>
          <value content="The &quot;AUV_Platform&quot; should define a Composite Type named &quot;Obstacle&quot;, to record the following values: &quot;ns_rel_dist&quot; (of type &quot;real&quot;), &quot;ew_rel_dist&quot; (of type real), &quot;depth&quot; (of type &quot;real&quot;), &quot;id&quot; (of type &quot;real&quot;), &quot;obs_hdng&quot; (of type &quot;SVec&quot;)."/>
        </content>
      </description>
      <externalReference>
        <location content="location"/>
        <type content="type"/>
        <metadata content="metadata"/>
        <version content="version"/>
        <implementationConstraint>
          <content>
            <value content="Constraint"/>
          </content>
        </implementationConstraint>
      </externalReference>
      <type architecture="true"/>
    </requirementAsset>
    <requirementAsset xsi:type="requirement_:NonFunctionalRequirement" gid="Interface1" priority="6">
      <name content="Interface1"/>
      <description>
        <content>
          <value content="The &quot;AUV_Module&quot; shall define an Interface named &quot;Sensors&quot;, which contains  the following Values: &quot;depth&quot; (of type &quot;real&quot;), &quot;hdng&quot; (of type &quot;SVec&quot;) and &quot;obs&quot; (of type &quot;Obstacle&quot;)."/>
        </content>
      </description>
      <externalReference>
        <location content="location"/>
        <type content="type"/>
        <metadata content="metadata"/>
        <version content="version"/>
        <implementationConstraint>
          <content>
            <value content="Constraint"/>
          </content>
        </implementationConstraint>
      </externalReference>
      <type architecture="true"/>
    </requirementAsset>
    <requirementAsset xsi:type="requirement_:NonFunctionalRequirement" gid="Interface2" priority="6">
      <name content="Interface2"/>
      <description>
        <content>
          <value content="The &quot;AUV_Module&quot; shall define an Interface named &quot;Intpus&quot;, which defines the following Events: &quot;endTask&quot;, &quot;reqOCM&quot; (with no Parameters and no Return Value), &quot;reqMOM&quot; (with no Parameters and no Return Value), &quot;reqHCM&quot; (with no Parameters and no Return Value), &quot;reqVel&quot; (with no Parameters, but with a Return Value of type &quot;real&quot;), and &quot;reqHdng&quot; (with no Parameters, but with a Return Value of type &quot;real&quot;)."/>
        </content>
      </description>
      <externalReference>
        <location content="location"/>
        <type content="type"/>
        <metadata content="metadata"/>
        <version content="version"/>
        <implementationConstraint>
          <content>
            <value content="Constraint"/>
          </content>
        </implementationConstraint>
      </externalReference>
      <type architecture="true"/>
    </requirementAsset>
    <requirementAsset xsi:type="requirement_:NonFunctionalRequirement" gid="Interface3" priority="6">
      <name content="Interface3"/>
      <description>
        <content>
          <value content="An Interface named &quot;Outputs&quot; should be defined for &quot;AUV_Module&quot;, which outputs the following Events: &quot;advVel&quot; (which takes one Parameters of type &quot;real&quot;, and no Return Value) and &quot;advHdng&quot; (which takes one Parameter of type &quot;real&quot;, and no Return Value)."/>
        </content>
      </description>
      <externalReference>
        <location content="location"/>
        <type content="type"/>
        <metadata content="metadata"/>
        <version content="version"/>
        <implementationConstraint>
          <content>
            <value content="Constraint"/>
          </content>
        </implementationConstraint>
      </externalReference>
      <type architecture="true"/>
    </requirementAsset>
    <requirementAsset xsi:type="requirement_:NonFunctionalRequirement" gid="Interface4" priority="6">
      <name content="Interface4"/>
      <description>
        <content>
          <value content="The &quot;AUV_Module&quot; shall define an Interface named &quot;Actuators&quot;, which should remain empty at this point."/>
        </content>
      </description>
      <externalReference>
        <location content="location"/>
        <type content="type"/>
        <metadata content="metadata"/>
        <version content="version"/>
        <implementationConstraint>
          <content>
            <value content="Constraint"/>
          </content>
        </implementationConstraint>
      </externalReference>
      <type architecture="true"/>
    </requirementAsset>
    <requirementAsset xsi:type="requirement_:NonFunctionalRequirement" gid="CF3" priority="6">
      <name content="CT3"/>
      <description>
        <content>
          <value content="The &quot;AUV_Platform&quot; should define a Composite Type named &quot;Close&quot;, to record the following values: &quot;horiz_cda&quot; (of type &quot;real&quot;), &quot;vert_cda&quot; (of type &quot;real&quot;), and &quot;id&quot; (of type &quot;nat&quot;)."/>
        </content>
      </description>
      <externalReference>
        <location content="location"/>
        <type content="type"/>
        <metadata content="metadata"/>
        <version content="version"/>
        <implementationConstraint>
          <content>
            <value content="Constraint"/>
          </content>
        </implementationConstraint>
      </externalReference>
      <type architecture="true"/>
    </requirementAsset>
    <requirementAsset xsi:type="requirement_:RequirementPackage" gid="LRE_RP">
      <name content="LRE_Behaviour Requirement Package"/>
      <description>
        <content>
          <value content="This package captures the requirements for the behaviour of the Last Response Engine (LRE)."/>
        </content>
      </description>
      <externalReference>
        <location content="location"/>
        <type content="type"/>
        <metadata content="metadata"/>
        <version content="version"/>
        <implementationConstraint>
          <content>
            <value content="Constraint"/>
          </content>
        </implementationConstraint>
      </externalReference>
      <requirementAsset xsi:type="requirement_:NonFunctionalRequirement" gid="LRE-NF1" priority="6">
        <name content="LRE_Beh"/>
        <description>
          <content>
            <value content="A State Machine named &quot;LRE_Beh&quot; shall be created to model the behaviour of the LRE."/>
          </content>
        </description>
        <externalReference>
          <location content="location"/>
          <type content="type"/>
          <metadata content="metadata"/>
          <version content="version"/>
          <implementationConstraint>
            <content>
              <value content="Constraint"/>
            </content>
          </implementationConstraint>
        </externalReference>
        <type architecture="true"/>
      </requirementAsset>
      <requirementAsset xsi:type="requirement_:NonFunctionalRequirement" gid="LRE-Var1" priority="6">
        <name content="Variable1"/>
        <description>
          <content>
            <value content="LRE_Beh shall define a Variable &quot;cobs&quot; of type Close (defined by the &quot;AUV platform&quot;), to denote the closest obstacle."/>
          </content>
        </description>
        <externalReference>
          <location content="location"/>
          <type content="type"/>
          <metadata content="metadata"/>
          <version content="version"/>
          <implementationConstraint>
            <content>
              <value content="Constraint"/>
            </content>
          </implementationConstraint>
        </externalReference>
        <type architecture="true"/>
      </requirementAsset>
      <requirementAsset xsi:type="requirement_:NonFunctionalRequirement" gid="LRE-Var2" priority="6">
        <name content="Variable2"/>
        <description>
          <content>
            <value content="LRE_Beh shall define a Variable &quot;inOPEZ&quot; of type boolean (defined by the AUV platform), to denote if the AUV is in an Object Proximity Exclusion Zone (OPEZ). "/>
          </content>
        </description>
        <externalReference>
          <location content="location"/>
          <type content="type"/>
          <metadata content="metadata"/>
          <version content="version"/>
          <implementationConstraint>
            <content>
              <value content="Constraint"/>
            </content>
          </implementationConstraint>
        </externalReference>
        <type/>
      </requirementAsset>
      <requirementAsset xsi:type="requirement_:NonFunctionalRequirement" gid="LRE-Var3" priority="6">
        <name content="Variable3"/>
        <description>
          <content>
            <value content="LRE_Beh shall define a Variable &quot;hvel&quot; of type real (defined by the AUV platform), to denote the AVU's horizontal velocity."/>
          </content>
        </description>
        <externalReference>
          <location content="location"/>
          <type content="type"/>
          <metadata content="metadata"/>
          <version content="version"/>
          <implementationConstraint>
            <content>
              <value content="Constraint"/>
            </content>
          </implementationConstraint>
        </externalReference>
        <type architecture="true"/>
      </requirementAsset>
      <requirementAsset xsi:type="requirement_:NonFunctionalRequirement" gid="LRE-Var4" priority="6">
        <name content="Variable4"/>
        <description>
          <content>
            <value content="LRE_Beh shall define a Variable &quot;vvel&quot; of type real (defined by the AUV platform), to denote the AVU's vertical velocity."/>
          </content>
        </description>
        <externalReference>
          <location content="location"/>
          <type content="type"/>
          <metadata content="metadata"/>
          <version content="version"/>
          <implementationConstraint>
            <content>
              <value content="Constraint"/>
            </content>
          </implementationConstraint>
        </externalReference>
        <type architecture="true"/>
      </requirementAsset>
      <requirementAsset xsi:type="requirement_:NonFunctionalRequirement" gid="LRE-Var5" priority="6">
        <name content="Variable5"/>
        <description>
          <content>
            <value content="LRE_Beh shall define a Variable &quot;cstc&quot; of type Obstacle (defined by the AUV platform), to denote the closest static obstacle."/>
          </content>
        </description>
        <externalReference>
          <location content="location"/>
          <type content="type"/>
          <metadata content="metadata"/>
          <version content="version"/>
          <implementationConstraint>
            <content>
              <value content="Constraint"/>
            </content>
          </implementationConstraint>
        </externalReference>
        <type architecture="true"/>
      </requirementAsset>
      <requirementAsset xsi:type="requirement_:NonFunctionalRequirement" gid="LRE-Var6" priority="6">
        <name content="Variable6"/>
        <description>
          <content>
            <value content="LRE_Beh shall define a Variable &quot;cdyn&quot; of type Obstacle (defined by the AUV platform), to denote the closest dynamic obstacle."/>
          </content>
        </description>
        <externalReference>
          <location content="location"/>
          <type content="type"/>
          <metadata content="metadata"/>
          <version content="version"/>
          <implementationConstraint>
            <content>
              <value content="Constraint"/>
            </content>
          </implementationConstraint>
        </externalReference>
        <type architecture="true"/>
      </requirementAsset>
      <requirementAsset xsi:type="requirement_:NonFunctionalRequirement" gid="LRE-Var7" priority="6">
        <name content="Variable7"/>
        <description>
          <content>
            <value content="LRE_Beh shall define a Variable &quot;depth&quot; of type real (defined by the AUV platform), to denote the depth of the AUV."/>
          </content>
        </description>
        <externalReference>
          <location content="location"/>
          <type content="type"/>
          <metadata content="metadata"/>
          <version content="version"/>
          <implementationConstraint>
            <content>
              <value content="Constraint"/>
            </content>
          </implementationConstraint>
        </externalReference>
        <type architecture="true"/>
      </requirementAsset>
      <requirementAsset xsi:type="requirement_:NonFunctionalRequirement" gid="LRE-Var8" priority="6">
        <name content="Variable8"/>
        <description>
          <content>
            <value content="LRE_Beh shall define a Variable &quot;CDA&quot; of type real (defined by the AUV platform), to denote the Closest Distance of Approach to an obstacle."/>
          </content>
        </description>
        <externalReference>
          <location content="location"/>
          <type content="type"/>
          <metadata content="metadata"/>
          <version content="version"/>
          <implementationConstraint>
            <content>
              <value content="Constraint"/>
            </content>
          </implementationConstraint>
        </externalReference>
        <type architecture="true"/>
      </requirementAsset>
      <requirementAsset xsi:type="requirement_:NonFunctionalRequirement" gid="LRE-Const1" priority="6">
        <name content="Constant1"/>
        <description>
          <content>
            <value content="LRE_Beh shall define a Constant &quot;AvoidanceMargin&quot; of type real (defined by the AUV platform), to denote the avoidance margin to obstacles."/>
          </content>
        </description>
        <externalReference>
          <location content="location"/>
          <type content="type"/>
          <metadata content="metadata"/>
          <version content="version"/>
          <implementationConstraint>
            <content>
              <value content="Constraint"/>
            </content>
          </implementationConstraint>
        </externalReference>
        <type architecture="true"/>
      </requirementAsset>
      <requirementAsset xsi:type="requirement_:NonFunctionalRequirement" gid="LRE-Const2" priority="6">
        <name content="Constant2"/>
        <description>
          <content>
            <value content="LRE_Beh shall define a Constant &quot;StaticObsHorizDist&quot; of type real (defined by the AUV platform), to denote the shortest distance allowed horizontally to an obstacle."/>
          </content>
        </description>
        <externalReference>
          <location content="location"/>
          <type content="type"/>
          <metadata content="metadata"/>
          <version content="version"/>
          <implementationConstraint>
            <content>
              <value content="Constraint"/>
            </content>
          </implementationConstraint>
        </externalReference>
        <type architecture="true"/>
      </requirementAsset>
      <requirementAsset xsi:type="requirement_:NonFunctionalRequirement" gid="LRE-Const3" priority="6">
        <name content="Constant3"/>
        <description>
          <content>
            <value content="LRE_Beh shall define a Constant &quot;StaticObsVertDist&quot; of type real (defined by the AUV platform), to denote the shortest distance allowed vertically to an obstacle."/>
          </content>
        </description>
        <externalReference>
          <location content="location"/>
          <type content="type"/>
          <metadata content="metadata"/>
          <version content="version"/>
          <implementationConstraint>
            <content>
              <value content="Constraint"/>
            </content>
          </implementationConstraint>
        </externalReference>
        <type architecture="true"/>
      </requirementAsset>
      <requirementAsset xsi:type="requirement_:NonFunctionalRequirement" gid="LRE-Const5" priority="6">
        <name content="Constant5"/>
        <description>
          <content>
            <value content="LRE_Beh shall define a Constant &quot;MinSafeDist&quot; of type real (defined by the AUV platform), to denote the minimal overall safe distance allowed to an obstacle."/>
          </content>
        </description>
        <externalReference>
          <location content="location"/>
          <type content="type"/>
          <metadata content="metadata"/>
          <version content="version"/>
          <implementationConstraint>
            <content>
              <value content="Constraint"/>
            </content>
          </implementationConstraint>
        </externalReference>
        <type architecture="true"/>
      </requirementAsset>
      <requirementAsset xsi:type="requirement_:FunctionalRequirement" gid="LRE-FR1" priority="5">
        <name content="State1"/>
        <description>
          <content>
            <value content="The LRE shall define a State named &quot;OCM&quot; (Operation Control Mode)."/>
          </content>
        </description>
        <externalReference>
          <location content="location"/>
          <type content="type"/>
          <metadata content="metadata"/>
          <version content="version"/>
          <implementationConstraint>
            <content>
              <value content="Constraint"/>
            </content>
          </implementationConstraint>
        </externalReference>
      </requirementAsset>
      <requirementAsset xsi:type="requirement_:FunctionalRequirement" gid="LRE-FR2" priority="5">
        <name content="State2"/>
        <description>
          <content>
            <value content="The LRE shall define a State named &quot;MOM&quot; (Main Operating Mode). On entrying MOM, the Event (from the Interface &quot;Output&quot;) &quot;advVel&quot; should be tiggered to advice the velocity of AUV to 1."/>
          </content>
        </description>
        <externalReference>
          <location content="location"/>
          <type content="type"/>
          <metadata content="metadata"/>
          <version content="version"/>
          <implementationConstraint>
            <content>
              <value content="Constraint"/>
            </content>
          </implementationConstraint>
        </externalReference>
      </requirementAsset>
      <requirementAsset xsi:type="requirement_:FunctionalRequirement" gid="LRE-FR3" priority="5">
        <name content="State3"/>
        <description>
          <content>
            <value content="The LRE shall define a State named &quot;CAM&quot; (Collision Avoidance Mode)."/>
          </content>
        </description>
        <externalReference>
          <location content="location"/>
          <type content="type"/>
          <metadata content="metadata"/>
          <version content="version"/>
          <implementationConstraint>
            <content>
              <value content="Constraint"/>
            </content>
          </implementationConstraint>
        </externalReference>
      </requirementAsset>
      <requirementAsset xsi:type="requirement_:FunctionalRequirement" gid="LRE-FR4" priority="5">
        <name content="State4"/>
        <description>
          <content>
            <value content="The LRE shall define a State named &quot;HCM&quot; (High Caution Mode). On entrying HCM, the Event (from the Interface &quot;Output&quot;) &quot;advVel&quot; should be tiggered to advice the velocity of AUV to 1."/>
          </content>
        </description>
        <externalReference>
          <location content="location"/>
          <type content="type"/>
          <metadata content="metadata"/>
          <version content="version"/>
          <implementationConstraint>
            <content>
              <value content="Constraint"/>
            </content>
          </implementationConstraint>
        </externalReference>
      </requirementAsset>
      <requirementAsset xsi:type="requirement_:NonFunctionalRequirement" gid="LRE-Var9" priority="6">
        <name content="Variable9"/>
        <description>
          <content>
            <value content="LRE_Beh shall define a variable &quot;TCPA&quot; of type real (defined by the AUV platform), to denote the Time at Closest Point of Approach to an obstacle."/>
          </content>
        </description>
        <externalReference>
          <location content="location"/>
          <type content="type"/>
          <metadata content="metadata"/>
          <version content="version"/>
          <implementationConstraint>
            <content>
              <value content="Constraint"/>
            </content>
          </implementationConstraint>
        </externalReference>
        <type architecture="true"/>
      </requirementAsset>
      <requirementAsset xsi:type="requirement_:NonFunctionalRequirement" gid="LRE-Var10" priority="6">
        <name content="Variable10"/>
        <description>
          <content>
            <value content="LRE_Beh shall define a variable &quot;x&quot; of type real (defined by the AUV platform), to denote the parameter to be passed to other components of the AUV."/>
          </content>
        </description>
        <externalReference>
          <location content="location"/>
          <type content="type"/>
          <metadata content="metadata"/>
          <version content="version"/>
          <implementationConstraint>
            <content>
              <value content="Constraint"/>
            </content>
          </implementationConstraint>
        </externalReference>
        <type architecture="true"/>
      </requirementAsset>
      <requirementAsset xsi:type="requirement_:NonFunctionalRequirement" gid="LRE-Const4" priority="6">
        <name content="Constant4"/>
        <description>
          <content>
            <value content="LRE_Beh shall define a Constant &quot;StaticObsDfltVertDist&quot; of type real (defined by the AUV platform), to denote the default vertical distance limit to a static obstacle."/>
          </content>
        </description>
        <externalReference>
          <location content="location"/>
          <type content="type"/>
          <metadata content="metadata"/>
          <version content="version"/>
          <implementationConstraint>
            <content>
              <value content="Constraint"/>
            </content>
          </implementationConstraint>
        </externalReference>
        <type architecture="true"/>
      </requirementAsset>
      <requirementAsset xsi:type="requirement_:FunctionalRequirement" gid="LRE-Beh1" priority="5">
        <name content="Beh1"/>
        <description>
          <content>
            <value content="On start up, the LRE shall be in the the OCM mode. "/>
          </content>
        </description>
        <externalReference>
          <location content="location"/>
          <type content="type"/>
          <metadata content="metadata"/>
          <version content="version"/>
          <implementationConstraint>
            <content>
              <value content="Constraint"/>
            </content>
          </implementationConstraint>
        </externalReference>
      </requirementAsset>
      <requirementAsset xsi:type="requirement_:FunctionalRequirement" gid="LRE-Beh2" priority="5">
        <name content="Beh2"/>
        <description>
          <content>
            <value content="The LRE shall transition from OCM to OCM if the Event &quot;reqVel&quot; (from the Interface &quot;Input&quot;) is triggered, the returned value of the Event shall be stored in variable &quot;x&quot;. Then the event &quot;advVel&quot; (from the Interface &quot;Output&quot;) shall be triggered, to pass the value of &quot;x&quot;. "/>
          </content>
        </description>
        <externalReference>
          <location content="location"/>
          <type content="type"/>
          <metadata content="metadata"/>
          <version content="version"/>
          <implementationConstraint>
            <content>
              <value content="Constraint"/>
            </content>
          </implementationConstraint>
        </externalReference>
      </requirementAsset>
      <requirementAsset xsi:type="requirement_:FunctionalRequirement" gid="LRE-Beh3" priority="5">
        <name content="Beh3"/>
        <description>
          <content>
            <value content="The LRE shall transition from OCM to OCM if the Event &quot;reqHdng&quot; (from the Interface &quot;Input&quot;) is triggered, the returned value of the Event shall be stored in variable &quot;x&quot;. Then the Event &quot;advHdng&quot; (from the Interface &quot;Output&quot;) shall be triggered, to pass the value of &quot;x&quot;. "/>
          </content>
        </description>
        <externalReference>
          <location content="location"/>
          <type content="type"/>
          <metadata content="metadata"/>
          <version content="version"/>
          <implementationConstraint>
            <content>
              <value content="Constraint"/>
            </content>
          </implementationConstraint>
        </externalReference>
      </requirementAsset>
      <requirementAsset xsi:type="requirement_:FunctionalRequirement" gid="LRE-Beh4" priority="5">
        <name content="Beh4"/>
        <description>
          <content>
            <value content="The LRE shall transition from OCM to MOM, with a trigger Event &quot;reqMOM&quot; (from the Interface &quot;Input&quot;), with the condition that: the velocity (&quot;vel&quot;) of the AUV is less than 0.1, the distance from the AUV to the closest dynamic obstacle is greater than 7.5, the the distance from the AUV to the closest static obstacle is greater than 0.3, and that the AUV is not in an OPEZ."/>
          </content>
        </description>
        <externalReference>
          <location content="location"/>
          <type content="type"/>
          <metadata content="metadata"/>
          <version content="version"/>
          <implementationConstraint>
            <content>
              <value content="Constraint"/>
            </content>
          </implementationConstraint>
        </externalReference>
      </requirementAsset>
      <requirementAsset xsi:type="requirement_:FunctionalRequirement" gid="LRE-Beh5" priority="5">
        <name content="Beh5"/>
        <description>
          <content>
            <value content="The LRE shall transition from MOM to OCM, if it determines that it is in an OPEZ (&quot;inOPEZ&quot;)."/>
          </content>
        </description>
        <externalReference>
          <location content="location"/>
          <type content="type"/>
          <metadata content="metadata"/>
          <version content="version"/>
          <implementationConstraint>
            <content>
              <value content="Constraint"/>
            </content>
          </implementationConstraint>
        </externalReference>
      </requirementAsset>
      <requirementAsset xsi:type="requirement_:FunctionalRequirement" gid="LRE-Beh6" priority="5">
        <name content="Beh6"/>
        <description>
          <content>
            <value content="The LRE shall transition from MOM to OCM, if the Event &quot;reqOCM&quot; is triggered."/>
          </content>
        </description>
        <externalReference>
          <location content="location"/>
          <type content="type"/>
          <metadata content="metadata"/>
          <version content="version"/>
          <implementationConstraint>
            <content>
              <value content="Constraint"/>
            </content>
          </implementationConstraint>
        </externalReference>
      </requirementAsset>
      <requirementAsset xsi:type="requirement_:FunctionalRequirement" gid="LRE-Beh8" priority="5">
        <name content="Beh8"/>
        <description>
          <content>
            <value content="The LRE shall transition from MOM to CAM, if it determines that the Closest Distance of Approach (&quot;CDA&quot;) to an obstacle is less than the defined minimal overall safe distance allowed to an obstacle (&quot;MinSafeDist&quot;), and that the Time at Closest Point of Approach to an obstacle (&quot;TCPA&quot;) is greater than or equal to 0."/>
          </content>
        </description>
        <externalReference>
          <location content="location"/>
          <type content="type"/>
          <metadata content="metadata"/>
          <version content="version"/>
          <implementationConstraint>
            <content>
              <value content="Constraint"/>
            </content>
          </implementationConstraint>
        </externalReference>
      </requirementAsset>
      <requirementAsset xsi:type="requirement_:FunctionalRequirement" gid="LRE-Beh7" priority="5">
        <name content="Beh7"/>
        <description>
          <content>
            <value content="The LRE shall transition from MOM to OCM, if the Event &quot;endTask&quot; is triggered, then the LRE triggers the Event &quot;advVel&quot;, to set the velocity of the AUV to 0."/>
          </content>
        </description>
        <externalReference>
          <location content="location"/>
          <type content="type"/>
          <metadata content="metadata"/>
          <version content="version"/>
          <implementationConstraint>
            <content>
              <value content="Constraint"/>
            </content>
          </implementationConstraint>
        </externalReference>
      </requirementAsset>
      <requirementAsset xsi:type="requirement_:FunctionalRequirement" gid="LRE-Beh9" priority="5">
        <name content="Beh9"/>
        <description>
          <content>
            <value content="The LRE shall transition from MOM to HCM, if the horizontal velocity (&quot;hvel&quot;) is greater than or equal to 0.1, the horizontal distance (&quot;hdist&quot;) to the closest static obstacle (&quot;cstc&quot;) is less than the defined allowed horizontal distance to static osbstacle (&quot;StaticObsHorizDist&quot;)."/>
          </content>
        </description>
        <externalReference>
          <location content="location"/>
          <type content="type"/>
          <metadata content="metadata"/>
          <version content="version"/>
          <implementationConstraint>
            <content>
              <value content="Constraint"/>
            </content>
          </implementationConstraint>
        </externalReference>
      </requirementAsset>
      <requirementAsset xsi:type="requirement_:FunctionalRequirement" gid="LRE-Beh10" priority="5">
        <name content="Beh10"/>
        <description>
          <content>
            <value content="The LRE shall transition from MOM to HCM, if the vertical distance (call to &quot;vdist&quot;) to the closest static obstacle (&quot;cstc&quot;) is less than or equal to the defined allowed default vertical distance to a static obstacle (&quot;StaticObsDfltVertDist&quot;)."/>
          </content>
        </description>
        <externalReference>
          <location content="location"/>
          <type content="type"/>
          <metadata content="metadata"/>
          <version content="version"/>
          <implementationConstraint>
            <content>
              <value content="Constraint"/>
            </content>
          </implementationConstraint>
        </externalReference>
      </requirementAsset>
      <requirementAsset xsi:type="requirement_:FunctionalRequirement" gid="LRE-Beh11" priority="5">
        <name content="Beh11"/>
        <description>
          <content>
            <value content="The LRE shall transition from MOM to HCM, if the vertical velocity (call to &quot;hvel&quot;) is greater than or equal to 0.1, the vertical distance (call to &quot;hdist&quot;) to the closest static obstacle (&quot;cstc&quot;) is less than the defined allowed vertical distance to static osbstacle (&quot;StaticObsVertDist&quot;)."/>
          </content>
        </description>
        <externalReference>
          <location content="location"/>
          <type content="type"/>
          <metadata content="metadata"/>
          <version content="version"/>
          <implementationConstraint>
            <content>
              <value content="Constraint"/>
            </content>
          </implementationConstraint>
        </externalReference>
      </requirementAsset>
      <requirementAsset xsi:type="requirement_:FunctionalRequirement" gid="LRE-Beh12" priority="5">
        <name content="Beh12"/>
        <description>
          <content>
            <value content="The LRE shall transition from MOM to HCM, if the Event &quot;reqHCM&quot; is triggered."/>
          </content>
        </description>
        <externalReference>
          <location content="location"/>
          <type content="type"/>
          <metadata content="metadata"/>
          <version content="version"/>
          <implementationConstraint>
            <content>
              <value content="Constraint"/>
            </content>
          </implementationConstraint>
        </externalReference>
      </requirementAsset>
      <requirementAsset xsi:type="requirement_:FunctionalRequirement" gid="LRE-Beh13" priority="5">
        <name content="Beh13"/>
        <description>
          <content>
            <value content="The LRE shall transition from HCM to MOM, if the horizontal distance (call to &quot;hdist&quot;) to the closest static obstacle (&quot;cstc&quot;) is greater than the allowed horizondal distance to a static obstacle (&quot;StaticObsHorzDist&quot;), and the vertical distance (call to &quot;vdist&quot;) to the closest static obstacle (&quot;cstc&quot;) is greater than the allowed vertical distance to a static obstacle (&quot;StaticObsVertDist&quot;)."/>
          </content>
        </description>
        <externalReference>
          <location content="location"/>
          <type content="type"/>
          <metadata content="metadata"/>
          <version content="version"/>
          <implementationConstraint>
            <content>
              <value content="Constraint"/>
            </content>
          </implementationConstraint>
        </externalReference>
      </requirementAsset>
      <requirementAsset xsi:type="requirement_:FunctionalRequirement" gid="LRE-Beh14" priority="5">
        <name content="Beh14"/>
        <description>
          <content>
            <value content="The LRE shall transition from HCM to CAM, if the the Closest Distance of Approach (&quot;CDA&quot;) to an obstacle is less than the defined minimal safe distance allowed to an obstacle (&quot;MinSafeDist&quot;), and that the Time at Closest Point of Approach to an obstacle (&quot;TCPA&quot;) is greater than or equal to 0."/>
          </content>
        </description>
        <externalReference>
          <location content="location"/>
          <type content="type"/>
          <metadata content="metadata"/>
          <version content="version"/>
          <implementationConstraint>
            <content>
              <value content="Constraint"/>
            </content>
          </implementationConstraint>
        </externalReference>
      </requirementAsset>
      <requirementAsset xsi:type="requirement_:FunctionalRequirement" gid="LRE-Beh15" priority="5">
        <name content="Beh15"/>
        <description>
          <content>
            <value content="The LRE shall transition from HCM to OCM, if the Event &quot;reqOCM&quot; is triggered."/>
          </content>
        </description>
        <externalReference>
          <location content="location"/>
          <type content="type"/>
          <metadata content="metadata"/>
          <version content="version"/>
          <implementationConstraint>
            <content>
              <value content="Constraint"/>
            </content>
          </implementationConstraint>
        </externalReference>
      </requirementAsset>
      <requirementAsset xsi:type="requirement_:FunctionalRequirement" gid="LRE-Beh16" priority="5">
        <name content="Beh16"/>
        <description>
          <content>
            <value content="The LRE shall transition from HCM to OCM, if it determines that it is in an OPEZ (&quot;inOPEZ&quot;)."/>
          </content>
        </description>
        <externalReference>
          <location content="location"/>
          <type content="type"/>
          <metadata content="metadata"/>
          <version content="version"/>
          <implementationConstraint>
            <content>
              <value content="Constraint"/>
            </content>
          </implementationConstraint>
        </externalReference>
      </requirementAsset>
      <requirementAsset xsi:type="requirement_:FunctionalRequirement" gid="LRE-Beh17" priority="5">
        <name content="Beh17"/>
        <description>
          <content>
            <value content="The LRE shall transition from CAM to OCM, if the Event &quot;reqOCM&quot; is triggered."/>
          </content>
        </description>
        <externalReference>
          <location content="location"/>
          <type content="type"/>
          <metadata content="metadata"/>
          <version content="version"/>
          <implementationConstraint>
            <content>
              <value content="Constraint"/>
            </content>
          </implementationConstraint>
        </externalReference>
      </requirementAsset>
      <requirementAsset xsi:type="requirement_:FunctionalRequirement" gid="LRE-Beh18" priority="5">
        <name content="Beh18"/>
        <description>
          <content>
            <value content="The LRE shall transition from CAM to OCM, if the the Closest Distance of Approach (&quot;CDA&quot;) to an obstacle is greater than or equal to the defined minimal safe distance allowed to an obstacle (&quot;MinSafeDist&quot;)."/>
          </content>
        </description>
        <externalReference>
          <location content="location"/>
          <type content="type"/>
          <metadata content="metadata"/>
          <version content="version"/>
          <implementationConstraint>
            <content>
              <value content="Constraint"/>
            </content>
          </implementationConstraint>
        </externalReference>
      </requirementAsset>
    </requirementAsset>
    <requirementAsset xsi:type="requirement_:FunctionalRequirement" gid="Platform-F1" priority="5">
      <name content="Function1"/>
      <description>
        <content>
          <value content="The &quot;AUV_Platform&quot; shall provide a Function named &quot;odist&quot;, which takes an &quot;Obstacle&quot; as input, that returns the distance from the AUV to the Obstacle (as &quot;real&quot;)."/>
        </content>
      </description>
      <externalReference>
        <location content="location"/>
        <type content="type"/>
        <metadata content="metadata"/>
        <version content="version"/>
        <implementationConstraint>
          <content>
            <value content="Constraint"/>
          </content>
        </implementationConstraint>
      </externalReference>
    </requirementAsset>
    <requirementAsset xsi:type="requirement_:FunctionalRequirement" gid="Platform-F2" priority="5">
      <name content="Function2"/>
      <description>
        <content>
          <value content="The &quot;AUV_Platform&quot; shall provide a Function named &quot;hdist&quot;, which takes an &quot;Obstacle&quot; as input, that returns the horizontal distance from the AUV to the Obstacle (as &quot;real&quot;)."/>
        </content>
      </description>
      <externalReference>
        <location content="location"/>
        <type content="type"/>
        <metadata content="metadata"/>
        <version content="version"/>
        <implementationConstraint>
          <content>
            <value content="Constraint"/>
          </content>
        </implementationConstraint>
      </externalReference>
    </requirementAsset>
    <requirementAsset xsi:type="requirement_:FunctionalRequirement" gid="Platform-F3" priority="5">
      <name content="Function3"/>
      <description>
        <content>
          <value content="The &quot;AUV_Platform&quot; shall provide a Function named &quot;vdist&quot;, which takes an &quot;Obstacle&quot; as input, that returns the vertical distance from the AUV to the Obstacle (as &quot;real&quot;)."/>
        </content>
      </description>
      <externalReference>
        <location content="location"/>
        <type content="type"/>
        <metadata content="metadata"/>
        <version content="version"/>
        <implementationConstraint>
          <content>
            <value content="Constraint"/>
          </content>
        </implementationConstraint>
      </externalReference>
    </requirementAsset>
  </requirementAsset>
</requirement_:RequirementPackage>
