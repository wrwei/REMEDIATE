{
    "term_trace": [
        {
            "Requirement": "The AUV system is developed as a Module named \"AUV_Module\".",
            "GID": "SD1",
            "Concept": "Module",
            "Concept_description": "A self-contained unit within the AUV system.",
            "Instance": "AUV_Module",
            "Instance_of": "Module",
            "Instance_description": "The specific module developed for the AUV system.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Robotic Platform named \"AUV_Platform\", it should use the Interfaces \"Sensors\" and \"Actuators\".",
            "GID": "SD2",
            "Concept": "RoboticPlatform",
            "Concept_description": "A base structure for supporting robotic components within the AUV Module.",
            "Instance": "AUV_Platform",
            "Instance_of": "RoboticPlatform",
            "Instance_description": "The specific platform used within the AUV Module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Robotic Platform named \"AUV_Platform\", it should use the Interfaces \"Sensors\" and \"Actuators\".",
            "GID": "SD2",
            "Concept": "Interface",
            "Concept_description": "A point of interaction between components within the AUV system.",
            "Instance": "Sensors",
            "Instance_of": "Interface",
            "Instance_description": "Devices that detect and measure physical properties.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Robotic Platform named \"AUV_Platform\", it should use the Interfaces \"Sensors\" and \"Actuators\".",
            "GID": "SD2",
            "Concept": "Interface",
            "Concept_description": "A point of interaction between components within the AUV system.",
            "Instance": "Actuators",
            "Instance_of": "Interface",
            "Instance_description": "Devices that convert energy into motion.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Operator\", it should use the Interface \"Inputs\".",
            "GID": "SD3",
            "Concept": "Controller",
            "Concept_description": "A device or set of instructions that manages the operation of the AUV system.",
            "Instance": "AUV_Operator",
            "Instance_of": "Controller",
            "Instance_description": "The specific controller used within the AUV Module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Operator\", it should use the Interface \"Inputs\".",
            "GID": "SD3",
            "Concept": "Interface",
            "Concept_description": "A point of interaction between components within the AUV system.",
            "Instance": "Inputs",
            "Instance_of": "Interface",
            "Instance_description": "Data or signals received by the system for processing.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"LRE_Ctrl\" (for Last Response Engine), it should use the Interfaces \"Inputs\" and \"Outputs\".",
            "GID": "SD4",
            "Concept": "Controller",
            "Concept_description": "A device or set of instructions that manages the operation of the AUV system.",
            "Instance": "LRE_Ctrl",
            "Instance_of": "Controller",
            "Instance_description": "The specific controller used within the AUV Module for the Last Response Engine.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"LRE_Ctrl\" (for Last Response Engine), it should use the Interfaces \"Inputs\" and \"Outputs\".",
            "GID": "SD4",
            "Concept": "Interface",
            "Concept_description": "A point of interaction between components within the AUV system.",
            "Instance": "Inputs",
            "Instance_of": "Interface",
            "Instance_description": "Data or signals received by the system for processing.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"LRE_Ctrl\" (for Last Response Engine), it should use the Interfaces \"Inputs\" and \"Outputs\".",
            "GID": "SD4",
            "Concept": "Interface",
            "Concept_description": "A point of interaction between components within the AUV system.",
            "Instance": "Outputs",
            "Instance_of": "Interface",
            "Instance_description": "Data or signals sent from the system after processing.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Autopilot\", it should use the Interface \"Outputs\".",
            "GID": "SD5",
            "Concept": "Controller",
            "Concept_description": "A device or set of instructions that manages the operation of the AUV system.",
            "Instance": "AUV_Autopilot",
            "Instance_of": "Controller",
            "Instance_description": "The specific controller used within the AUV Module for autopilot functions.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Autopilot\", it should use the Interface \"Outputs\".",
            "GID": "SD5",
            "Concept": "Interface",
            "Concept_description": "A point of interaction between components within the AUV system.",
            "Instance": "Outputs",
            "Instance_of": "Interface",
            "Instance_description": "Data or signals sent from the system after processing.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Platform\" should define a Primitive Type named \"nat\" (for natural numbers).",
            "GID": "PT1",
            "Concept": "PrimitiveType",
            "Concept_description": "A basic data type used in programming to define simple values.",
            "Instance": "nat",
            "Instance_of": "PrimitiveType",
            "Instance_description": "A data type representing natural numbers.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Platform\" should define a Primitive Type named \"int\" (for integers).",
            "GID": "PT2",
            "Concept": "PrimitiveType",
            "Concept_description": "A basic data type used in programming to define simple values.",
            "Instance": "int",
            "Instance_of": "PrimitiveType",
            "Instance_description": "A data type representing integers.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Platform\" should define a Primitive Type named \"string\" (for string values).",
            "GID": "PT3",
            "Concept": "PrimitiveType",
            "Concept_description": "A basic data type used in programming to define simple values.",
            "Instance": "string",
            "Instance_of": "PrimitiveType",
            "Instance_description": "A data type representing string values.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Platform\" should define a Primitive Type named \"boolean\" (for boolean values).",
            "GID": "PT4",
            "Concept": "PrimitiveType",
            "Concept_description": "A basic data type used in programming to define simple values.",
            "Instance": "boolean",
            "Instance_of": "PrimitiveType",
            "Instance_description": "A data type representing boolean values.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Platform\" should define a Primitive Type named \"real\" (for real numbers).",
            "GID": "PT5",
            "Concept": "PrimitiveType",
            "Concept_description": "A basic data type used in programming to define simple values.",
            "Instance": "real",
            "Instance_of": "PrimitiveType",
            "Instance_description": "A data type representing real numbers.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Platform\" should define a Composite Type named \"SVec\" (Spherical Vector), to record values such as \"radial\" (of type \"real\"), \"polar\" (of type \"real\"), and \"azimuth\" (of type \"real\").",
            "GID": "CT1",
            "Concept": "CompositeType",
            "Concept_description": "A complex data type composed of multiple primitive types.",
            "Instance": "SVec",
            "Instance_of": "CompositeType",
            "Instance_description": "A data type representing a spherical vector with components radial, polar, and azimuth.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Platform\" should define a Composite Type named \"SVec\" (Spherical Vector), to record values such as \"radial\" (of type \"real\"), \"polar\" (of type \"real\"), and \"azimuth\" (of type \"real\").",
            "GID": "CT1",
            "Concept": "Value",
            "Concept_description": "A specific data element within a composite type.",
            "Instance": "radial",
            "Instance_of": "Value",
            "Instance_description": "A component of SVec representing the radial distance, of type real.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Platform\" should define a Composite Type named \"SVec\" (Spherical Vector), to record values such as \"radial\" (of type \"real\"), \"polar\" (of type \"real\"), and \"azimuth\" (of type \"real\").",
            "GID": "CT1",
            "Concept": "Value",
            "Concept_description": "A specific data element within a composite type.",
            "Instance": "polar",
            "Instance_of": "Value",
            "Instance_description": "A component of SVec representing the polar angle, of type real.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Platform\" should define a Composite Type named \"SVec\" (Spherical Vector), to record values such as \"radial\" (of type \"real\"), \"polar\" (of type \"real\"), and \"azimuth\" (of type \"real\").",
            "GID": "CT1",
            "Concept": "Value",
            "Concept_description": "A specific data element within a composite type.",
            "Instance": "azimuth",
            "Instance_of": "Value",
            "Instance_description": "A component of SVec representing the azimuth angle, of type real.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Platform\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "CompositeType",
            "Concept_description": "A complex data type composed of multiple primitive types.",
            "Instance": "Obstacle",
            "Instance_of": "CompositeType",
            "Instance_description": "A data type representing an obstacle with various attributes.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Platform\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "Value",
            "Concept_description": "A specific data element within a composite type.",
            "Instance": "ns_rel_dist",
            "Instance_of": "Value",
            "Instance_description": "A component of Obstacle representing the north-south relative distance, of type real.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Platform\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "Value",
            "Concept_description": "A specific data element within a composite type.",
            "Instance": "ew_rel_dist",
            "Instance_of": "Value",
            "Instance_description": "A component of Obstacle representing the east-west relative distance, of type real.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Platform\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "Value",
            "Concept_description": "A specific data element within a composite type.",
            "Instance": "depth",
            "Instance_of": "Value",
            "Instance_description": "A component of Obstacle representing the depth, of type real.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Platform\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "Value",
            "Concept_description": "A specific data element within a composite type.",
            "Instance": "id",
            "Instance_of": "Value",
            "Instance_description": "A component of Obstacle representing the identifier, of type real.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Platform\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "Value",
            "Concept_description": "A specific data element within a composite type.",
            "Instance": "obs_hdng",
            "Instance_of": "Value",
            "Instance_description": "A component of Obstacle representing the obstacle heading, of type SVec.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        }
    ]
}