{
    "term_trace": [
        {
            "Requirement": "The AUV system is developed as a Module named \"AUV_Module\".",
            "GID": "SD1",
            "Concept": "Module",
            "Concept_description": "A self-contained unit of the AUV system designed to perform specific tasks or functions.",
            "Instance": "AUV_Module",
            "Instance_of": "Module",
            "Instance_description": "The specific module of the AUV system being developed.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Robotic Platform named \"AUV_Platform\", it should use the Interfaces \"Sensors\" and \"Actuators\" (defined by \"AUV_Module\").",
            "GID": "SD2",
            "Concept": "RoboticPlatform",
            "Concept_description": "A base structure within the AUV module designed to support and integrate various robotic functionalities.",
            "Instance": "AUV_Platform",
            "Instance_of": "RoboticPlatform",
            "Instance_description": "The specific robotic platform within the AUV module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Robotic Platform named \"AUV_Platform\", it should use the Interfaces \"Sensors\" and \"Actuators\" (defined by \"AUV_Module\").",
            "GID": "SD2",
            "Concept": "Interface",
            "Concept_description": "A point of interaction or communication between the AUV module and its components or external systems.",
            "Instance": "Sensors",
            "Instance_of": "Interface",
            "Instance_description": "The specific interface used for sensing within the AUV module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Robotic Platform named \"AUV_Platform\", it should use the Interfaces \"Sensors\" and \"Actuators\" (defined by \"AUV_Module\").",
            "GID": "SD2",
            "Concept": "Interface",
            "Concept_description": "A point of interaction or communication between the AUV module and its components or external systems.",
            "Instance": "Actuators",
            "Instance_of": "Interface",
            "Instance_description": "The specific interface used for actuation within the AUV module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Operator\", it should use the Interface \"Inputs\" (defined by \"AUV_Module\").",
            "GID": "SD3",
            "Concept": "Controller",
            "Concept_description": "A component within the AUV module responsible for managing and directing operations.",
            "Instance": "AUV_Operator",
            "Instance_of": "Controller",
            "Instance_description": "The specific controller within the AUV module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Operator\", it should use the Interface \"Inputs\" (defined by \"AUV_Module\").",
            "GID": "SD3",
            "Concept": "Interface",
            "Concept_description": "A point of interaction or communication between the AUV module and its components or external systems.",
            "Instance": "Inputs",
            "Instance_of": "Interface",
            "Instance_description": "The specific interface used for receiving inputs within the AUV module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"LRE_Ctrl\" (for Last Response Engine), it should use the Interfaces \"Inputs\" and \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD4",
            "Concept": "Controller",
            "Concept_description": "A component within the AUV module responsible for managing and directing operations.",
            "Instance": "LRE_Ctrl",
            "Instance_of": "Controller",
            "Instance_description": "The specific controller for the Last Response Engine within the AUV module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"LRE_Ctrl\" (for Last Response Engine), it should use the Interfaces \"Inputs\" and \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD4",
            "Concept": "Interface",
            "Concept_description": "A point of interaction or communication between the AUV module and its components or external systems.",
            "Instance": "Inputs",
            "Instance_of": "Interface",
            "Instance_description": "The specific interface used for receiving inputs within the AUV module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"LRE_Ctrl\" (for Last Response Engine), it should use the Interfaces \"Inputs\" and \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD4",
            "Concept": "Interface",
            "Concept_description": "A point of interaction or communication between the AUV module and its components or external systems.",
            "Instance": "Outputs",
            "Instance_of": "Interface",
            "Instance_description": "The specific interface used for sending outputs within the AUV module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Autopilot\", it should use the Interface \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD5",
            "Concept": "Controller",
            "Concept_description": "A component within the AUV module responsible for managing and directing operations.",
            "Instance": "AUV_Autopilot",
            "Instance_of": "Controller",
            "Instance_description": "The specific controller for autopilot functions within the AUV module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Autopilot\", it should use the Interface \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD5",
            "Concept": "Interface",
            "Concept_description": "A point of interaction or communication between the AUV module and its components or external systems.",
            "Instance": "Outputs",
            "Instance_of": "Interface",
            "Instance_description": "The specific interface used for sending outputs within the AUV module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"nat\" (for natural numbers).",
            "GID": "PT1",
            "Concept": "PrimitiveType",
            "Concept_description": "A basic data type defined within the AUV module for representing simple values.",
            "Instance": "nat",
            "Instance_of": "PrimitiveType",
            "Instance_description": "The specific primitive type for natural numbers within the AUV module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"int\" (for integers).",
            "GID": "PT2",
            "Concept": "PrimitiveType",
            "Concept_description": "A basic data type defined within the AUV module for representing simple values.",
            "Instance": "int",
            "Instance_of": "PrimitiveType",
            "Instance_description": "The specific primitive type for integers within the AUV module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"string\" (for string values).",
            "GID": "PT3",
            "Concept": "PrimitiveType",
            "Concept_description": "A basic data type defined within the AUV module for representing simple values.",
            "Instance": "string",
            "Instance_of": "PrimitiveType",
            "Instance_description": "The specific primitive type for string values within the AUV module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"boolean\" (for boolean values).",
            "GID": "PT4",
            "Concept": "PrimitiveType",
            "Concept_description": "A basic data type defined within the AUV module for representing simple values.",
            "Instance": "boolean",
            "Instance_of": "PrimitiveType",
            "Instance_description": "The specific primitive type for boolean values within the AUV module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"real\" (for real numbers).",
            "GID": "PT5",
            "Concept": "PrimitiveType",
            "Concept_description": "A basic data type defined within the AUV module for representing simple values.",
            "Instance": "real",
            "Instance_of": "PrimitiveType",
            "Instance_description": "The specific primitive type for real numbers within the AUV module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"SVec\" (Spherical Vector), to record values such as \"radial\" (of type \"real\"), \"polar\" (of type \"real\"), and \"azimuth\" (of type \"real\").",
            "GID": "CT1",
            "Concept": "CompositeType",
            "Concept_description": "A complex data type defined within the AUV module, composed of multiple primitive types.",
            "Instance": "SVec",
            "Instance_of": "CompositeType",
            "Instance_description": "The specific composite type for spherical vectors within the AUV module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"SVec\" (Spherical Vector), to record values such as \"radial\" (of type \"real\"), \"polar\" (of type \"real\"), and \"azimuth\" (of type \"real\").",
            "GID": "CT1",
            "Concept": "Value",
            "Concept_description": "An element or property within a composite type that holds data.",
            "Instance": "radial",
            "Instance_of": "Value",
            "Instance_description": "A value of type \"real\" within the spherical vector composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"SVec\" (Spherical Vector), to record values such as \"radial\" (of type \"real\"), \"polar\" (of type \"real\"), and \"azimuth\" (of type \"real\").",
            "GID": "CT1",
            "Concept": "Value",
            "Concept_description": "An element or property within a composite type that holds data.",
            "Instance": "polar",
            "Instance_of": "Value",
            "Instance_description": "A value of type \"real\" within the spherical vector composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"SVec\" (Spherical Vector), to record values such as \"radial\" (of type \"real\"), \"polar\" (of type \"real\"), and \"azimuth\" (of type \"real\").",
            "GID": "CT1",
            "Concept": "Value",
            "Concept_description": "An element or property within a composite type that holds data.",
            "Instance": "azimuth",
            "Instance_of": "Value",
            "Instance_description": "A value of type \"real\" within the spherical vector composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "CompositeType",
            "Concept_description": "A complex data type defined within the AUV module, composed of multiple primitive types.",
            "Instance": "Obstacle",
            "Instance_of": "CompositeType",
            "Instance_description": "The specific composite type for representing obstacles within the AUV module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "Value",
            "Concept_description": "An element or property within a composite type that holds data.",
            "Instance": "ns_rel_dist",
            "Instance_of": "Value",
            "Instance_description": "A value of type \"real\" representing the north-south relative distance within the obstacle composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "Value",
            "Concept_description": "An element or property within a composite type that holds data.",
            "Instance": "ew_rel_dist",
            "Instance_of": "Value",
            "Instance_description": "A value of type \"real\" representing the east-west relative distance within the obstacle composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "Value",
            "Concept_description": "An element or property within a composite type that holds data.",
            "Instance": "depth",
            "Instance_of": "Value",
            "Instance_description": "A value of type \"real\" representing the depth within the obstacle composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "Value",
            "Concept_description": "An element or property within a composite type that holds data.",
            "Instance": "id",
            "Instance_of": "Value",
            "Instance_description": "A value of type \"real\" representing the identifier within the obstacle composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "Value",
            "Concept_description": "An element or property within a composite type that holds data.",
            "Instance": "obs_hdng",
            "Instance_of": "Value",
            "Instance_description": "A value of type \"SVec\" representing the obstacle heading within the obstacle composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Sensors\", which contains the following Values: \"depth\" (of type \"real\"), \"hdng\" (of type \"SVec\") and \"obs\" (of type \"Obstacle\").",
            "GID": "Interface1",
            "Concept": "Interface",
            "Concept_description": "A point of interaction or communication between the AUV module and its components or external systems.",
            "Instance": "Sensors",
            "Instance_of": "Interface",
            "Instance_description": "The specific interface within the AUV module that contains sensor data.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Sensors\", which contains the following Values: \"depth\" (of type \"real\"), \"hdng\" (of type \"SVec\") and \"obs\" (of type \"Obstacle\").",
            "GID": "Interface1",
            "Concept": "Value",
            "Concept_description": "An element or property within a composite type that holds data.",
            "Instance": "depth",
            "Instance_of": "Value",
            "Instance_description": "A value of type \"real\" representing depth within the sensors interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Sensors\", which contains the following Values: \"depth\" (of type \"real\"), \"hdng\" (of type \"SVec\") and \"obs\" (of type \"Obstacle\").",
            "GID": "Interface1",
            "Concept": "Value",
            "Concept_description": "An element or property within a composite type that holds data.",
            "Instance": "hdng",
            "Instance_of": "Value",
            "Instance_description": "A value of type \"SVec\" representing heading within the sensors interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Sensors\", which contains the following Values: \"depth\" (of type \"real\"), \"hdng\" (of type \"SVec\") and \"obs\" (of type \"Obstacle\").",
            "GID": "Interface1",
            "Concept": "Value",
            "Concept_description": "An element or property within a composite type that holds data.",
            "Instance": "obs",
            "Instance_of": "Value",
            "Instance_description": "A value of type \"Obstacle\" representing obstacles within the sensors interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Interface",
            "Concept_description": "A point of interaction or communication between the AUV module and its components or external systems.",
            "Instance": "Intpus",
            "Instance_of": "Interface",
            "Instance_description": "The specific interface within the AUV module that defines input events.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An occurrence or action that is detected by the system, often triggering specific responses.",
            "Instance": "endTask",
            "Instance_of": "Event",
            "Instance_description": "An event with no parameters and no return value within the inputs interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An occurrence or action that is detected by the system, often triggering specific responses.",
            "Instance": "reqOCM",
            "Instance_of": "Event",
            "Instance_description": "An event with no parameters and no return value within the inputs interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An occurrence or action that is detected by the system, often triggering specific responses.",
            "Instance": "reqMOM",
            "Instance_of": "Event",
            "Instance_description": "An event with no parameters and no return value within the inputs interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An occurrence or action that is detected by the system, often triggering specific responses.",
            "Instance": "reqHCM",
            "Instance_of": "Event",
            "Instance_description": "An event with no parameters and no return value within the inputs interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An occurrence or action that is detected by the system, often triggering specific responses.",
            "Instance": "reqVel",
            "Instance_of": "Event",
            "Instance_description": "An event with no parameters but with a return value of type \"real\" within the inputs interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An occurrence or action that is detected by the system, often triggering specific responses.",
            "Instance": "reqHdng",
            "Instance_of": "Event",
            "Instance_description": "An event with no parameters but with a return value of type \"real\" within the inputs interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Outputs\", which defines the following Events: \"advVel\" (which takes one Parameters of type \"real\", and no Return Value) and \"advHdng\" (which takes one Parameters of type \"real\", and no Return Value).",
            "GID": "Interface3",
            "Concept": "Interface",
            "Concept_description": "A point of interaction or communication between the AUV module and its components or external systems.",
            "Instance": "Outputs",
            "Instance_of": "Interface",
            "Instance_description": "The specific interface within the AUV module that defines output events.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Outputs\", which defines the following Events: \"advVel\" (which takes one Parameters of type \"real\", and no Return Value) and \"advHdng\" (which takes one Parameters of type \"real\", and no Return Value).",
            "GID": "Interface3",
            "Concept": "Event",
            "Concept_description": "An occurrence or action that is detected by the system, often triggering specific responses.",
            "Instance": "advVel",
            "Instance_of": "Event",
            "Instance_description": "An event taking one parameter of type \"real\" and no return value within the outputs interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Outputs\", which defines the following Events: \"advVel\" (which takes one Parameters of type \"real\", and no Return Value) and \"advHdng\" (which takes one Parameters of type \"real\", and no Return Value).",
            "GID": "Interface3",
            "Concept": "Event",
            "Concept_description": "An occurrence or action that is detected by the system, often triggering specific responses.",
            "Instance": "advHdng",
            "Instance_of": "Event",
            "Instance_description": "An event taking one parameter of type \"real\" and no return value within the outputs interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Actuators\", which should remain empty at this point.",
            "GID": "Interface4",
            "Concept": "Interface",
            "Concept_description": "A point of interaction or communication between the AUV module and its components or external systems.",
            "Instance": "Actuators",
            "Instance_of": "Interface",
            "Instance_description": "The specific interface within the AUV module that is currently empty.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Close\", to record the following values: \"horiz_cda\" (of type \"real\"), \"vert_cda\" (of type \"real\"), and \"id\" (of type \"nat\").",
            "GID": "CF3",
            "Concept": "CompositeType",
            "Concept_description": "A complex data type defined within the AUV module, composed of multiple primitive types.",
            "Instance": "Close",
            "Instance_of": "CompositeType",
            "Instance_description": "The specific composite type for recording close values within the AUV module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Close\", to record the following values: \"horiz_cda\" (of type \"real\"), \"vert_cda\" (of type \"real\"), and \"id\" (of type \"nat\").",
            "GID": "CF3",
            "Concept": "Value",
            "Concept_description": "An element or property within a composite type that holds data.",
            "Instance": "horiz_cda",
            "Instance_of": "Value",
            "Instance_description": "A value of type \"real\" representing horizontal close distance within the close composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Close\", to record the following values: \"horiz_cda\" (of type \"real\"), \"vert_cda\" (of type \"real\"), and \"id\" (of type \"nat\").",
            "GID": "CF3",
            "Concept": "Value",
            "Concept_description": "An element or property within a composite type that holds data.",
            "Instance": "vert_cda",
            "Instance_of": "Value",
            "Instance_description": "A value of type \"real\" representing vertical close distance within the close composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Close\", to record the following values: \"horiz_cda\" (of type \"real\"), \"vert_cda\" (of type \"real\"), and \"id\" (of type \"nat\").",
            "GID": "CF3",
            "Concept": "Value",
            "Concept_description": "An element or property within a composite type that holds data.",
            "Instance": "id",
            "Instance_of": "Value",
            "Instance_description": "A value of type \"nat\" representing the identifier within the close composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"odist\", which takes an \"Obstacle\" as input, that returns the distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F1",
            "Concept": "Function",
            "Concept_description": "A specific operation or calculation defined within the AUV module.",
            "Instance": "odist",
            "Instance_of": "Function",
            "Instance_description": "A function that calculates the distance from the AUV to an obstacle.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"odist\", which takes an \"Obstacle\" as input, that returns the distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F1",
            "Concept": "Obstacle",
            "Concept_description": null,
            "Instance": "Obstacle",
            "Instance_of": "Obstacle",
            "Instance_description": "An input parameter for the function representing an obstacle.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"odist\", which takes an \"Obstacle\" as input, that returns the distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F1",
            "Concept": "Real",
            "Concept_description": null,
            "Instance": "real",
            "Instance_of": "Real",
            "Instance_description": "The return type of the function representing the distance.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"hdist\", which takes an \"Obstacle\" as input, that returns the horizontal distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F2",
            "Concept": "Function",
            "Concept_description": "A specific operation or calculation defined within the AUV module.",
            "Instance": "hdist",
            "Instance_of": "Function",
            "Instance_description": "A function that calculates the horizontal distance from the AUV to an obstacle.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"hdist\", which takes an \"Obstacle\" as input, that returns the horizontal distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F2",
            "Concept": null,
            "Concept_description": null,
            "Instance": "Obstacle",
            "Instance_of": "Obstacle",
            "Instance_description": "An input parameter for the function representing an obstacle.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"hdist\", which takes an \"Obstacle\" as input, that returns the horizontal distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F2",
            "Concept": null,
            "Concept_description": null,
            "Instance": "real",
            "Instance_of": "Real",
            "Instance_description": "The return type of the function representing the horizontal distance.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"vdist\", which takes an \"Obstacle\" as input, that returns the vertical distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F3",
            "Concept": "Function",
            "Concept_description": "A specific operation or calculation defined within the AUV module.",
            "Instance": "vdist",
            "Instance_of": "Function",
            "Instance_description": "A function that calculates the vertical distance from the AUV to an obstacle.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"vdist\", which takes an \"Obstacle\" as input, that returns the vertical distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F3",
            "Concept": null,
            "Concept_description": null,
            "Instance": "Obstacle",
            "Instance_of": "Obstacle",
            "Instance_description": "An input parameter for the function representing an obstacle.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"vdist\", which takes an \"Obstacle\" as input, that returns the vertical distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F3",
            "Concept": null,
            "Concept_description": null,
            "Instance": "real",
            "Instance_of": "Real",
            "Instance_description": "The return type of the function representing the vertical distance.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        }
    ]
}