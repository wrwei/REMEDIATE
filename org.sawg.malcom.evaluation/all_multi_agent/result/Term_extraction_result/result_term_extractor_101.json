{
    "term_trace": [
        {
            "Requirement": "The AUV system is developed as a Module named \"AUV_Module\".",
            "GID": "SD1",
            "Concept": "Module",
            "Concept_description": "A distinct and self-contained unit of the AUV system, designed to perform specific functions.",
            "Instance": "AUV_Module",
            "Instance_of": "Module",
            "Instance_description": "The specific module of the AUV system.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Robotic Platform named \"AUV_Platform\", it should use the Interfaces \"Sensors\" and \"Actuators\" (defined by \"AUV_Module\").",
            "GID": "SD2",
            "Concept": "RoboticPlatform",
            "Concept_description": "A base structure or framework on which robotic systems are built and operate.",
            "Instance": "AUV_Platform",
            "Instance_of": "RoboticPlatform",
            "Instance_description": "The specific robotic platform contained within the AUV_Module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Robotic Platform named \"AUV_Platform\", it should use the Interfaces \"Sensors\" and \"Actuators\" (defined by \"AUV_Module\").",
            "GID": "SD2",
            "Concept": "Interface",
            "Concept_description": "A shared boundary across which two or more separate components of a computer system exchange information.",
            "Instance": "Sensors",
            "Instance_of": "Interface",
            "Instance_description": "The interface used by the AUV_Platform for sensing the environment.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Robotic Platform named \"AUV_Platform\", it should use the Interfaces \"Sensors\" and \"Actuators\" (defined by \"AUV_Module\").",
            "GID": "SD2",
            "Concept": "Interface",
            "Concept_description": "A shared boundary across which two or more separate components of a computer system exchange information.",
            "Instance": "Actuators",
            "Instance_of": "Interface",
            "Instance_description": "The interface used by the AUV_Platform for performing actions in the environment.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Operator\", it should use the Interface \"Inputs\" (defined by \"AUV_Module\").",
            "GID": "SD3",
            "Concept": "Controller",
            "Concept_description": "A component responsible for managing the operations and responses of a system.",
            "Instance": "AUV_Operator",
            "Instance_of": "Controller",
            "Instance_description": "The specific controller within the AUV_Module responsible for operating the AUV.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Operator\", it should use the Interface \"Inputs\" (defined by \"AUV_Module\").",
            "GID": "SD3",
            "Concept": "Interface",
            "Concept_description": "A shared boundary across which two or more separate components of a computer system exchange information.",
            "Instance": "Inputs",
            "Instance_of": "Interface",
            "Instance_description": "The interface used by the AUV_Operator for receiving input data.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"LRE_Ctrl\" (for Last Response Engine), it should use the Interfaces \"Inputs\" and \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD4",
            "Concept": "Controller",
            "Concept_description": "A component responsible for managing the operations and responses of a system.",
            "Instance": "LRE_Ctrl",
            "Instance_of": "Controller",
            "Instance_description": "The specific controller within the AUV_Module responsible for the Last Response Engine.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"LRE_Ctrl\" (for Last Response Engine), it should use the Interfaces \"Inputs\" and \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD4",
            "Concept": "Interface",
            "Concept_description": "A shared boundary across which two or more separate components of a computer system exchange information.",
            "Instance": "Inputs",
            "Instance_of": "Interface",
            "Instance_description": "The interface used by the LRE_Ctrl for receiving input data.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"LRE_Ctrl\" (for Last Response Engine), it should use the Interfaces \"Inputs\" and \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD4",
            "Concept": "Interface",
            "Concept_description": "A shared boundary across which two or more separate components of a computer system exchange information.",
            "Instance": "Outputs",
            "Instance_of": "Interface",
            "Instance_description": "The interface used by the LRE_Ctrl for sending output data.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Autopilot\", it should use the Interface \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD5",
            "Concept": "Controller",
            "Concept_description": "A component responsible for managing the operations and responses of a system.",
            "Instance": "AUV_Autopilot",
            "Instance_of": "Controller",
            "Instance_description": "The specific controller within the AUV_Module responsible for autonomously piloting the AUV.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Autopilot\", it should use the Interface \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD5",
            "Concept": "Interface",
            "Concept_description": "A shared boundary across which two or more separate components of a computer system exchange information.",
            "Instance": "Outputs",
            "Instance_of": "Interface",
            "Instance_description": "The interface used by the AUV_Autopilot for sending output data.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"nat\" (for natural numbers).",
            "GID": "PT1",
            "Concept": "PrimitiveType",
            "Concept_description": "A basic data type provided by a programming language as a basic building block.",
            "Instance": "nat",
            "Instance_of": "PrimitiveType",
            "Instance_description": "A primitive type representing natural numbers.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"int\" (for integers).",
            "GID": "PT2",
            "Concept": "PrimitiveType",
            "Concept_description": "A basic data type provided by a programming language as a basic building block.",
            "Instance": "int",
            "Instance_of": "PrimitiveType",
            "Instance_description": "A primitive type representing integers.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"string\" (for string values).",
            "GID": "PT3",
            "Concept": "PrimitiveType",
            "Concept_description": "A basic data type provided by a programming language as a basic building block.",
            "Instance": "string",
            "Instance_of": "PrimitiveType",
            "Instance_description": "A primitive type representing string values.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"boolean\" (for boolean values).",
            "GID": "PT4",
            "Concept": "PrimitiveType",
            "Concept_description": "A basic data type provided by a programming language as a basic building block.",
            "Instance": "boolean",
            "Instance_of": "PrimitiveType",
            "Instance_description": "A primitive type representing boolean values.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"real\" (for real numbers).",
            "GID": "PT5",
            "Concept": "PrimitiveType",
            "Concept_description": "A basic data type provided by a programming language as a basic building block.",
            "Instance": "real",
            "Instance_of": "PrimitiveType",
            "Instance_description": "A primitive type representing real numbers.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"SVec\" (Spherical Vector), to record values such as \"radial\" (of type \"real\"), \"polar\" (of type \"real\"), and \"azimuth\" (of type \"real\").",
            "GID": "CT1",
            "Concept": "CompositeType",
            "Concept_description": "A complex data type composed of multiple primitive types, used to represent structured data.",
            "Instance": "SVec",
            "Instance_of": "CompositeType",
            "Instance_description": "A composite type representing a Spherical Vector, containing radial, polar, and azimuth values.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "CompositeType",
            "Concept_description": "A complex data type composed of multiple primitive types, used to represent structured data.",
            "Instance": "Obstacle",
            "Instance_of": "CompositeType",
            "Instance_description": "A composite type representing an obstacle, containing values for relative distances, depth, id, and heading.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Sensors\", which contains the following Values: \"depth\" (of type \"real\"), \"hdng\" (of type \"SVec\") and \"obs\" (of type \"Obstacle\").",
            "GID": "Interface1",
            "Concept": "Interface",
            "Concept_description": "A shared boundary across which two or more separate components of a computer system exchange information.",
            "Instance": "Sensors",
            "Instance_of": "Interface",
            "Instance_description": "An interface within the AUV_Module containing values for depth, heading, and obstacles.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Interface",
            "Concept_description": "A shared boundary across which two or more separate components of a computer system exchange information.",
            "Instance": "Intpus",
            "Instance_of": "Interface",
            "Instance_description": "An interface within the AUV_Module defining events related to task completion and requests, with some returning real values.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An occurrence or action that is detected by a program and may trigger a response.",
            "Instance": "endTask",
            "Instance_of": "Event",
            "Instance_description": "An event with no parameters and no return value.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An occurrence or action that is detected by a program and may trigger a response.",
            "Instance": "reqOCM",
            "Instance_of": "Event",
            "Instance_description": "An event with no parameters and no return value.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An occurrence or action that is detected by a program and may trigger a response.",
            "Instance": "reqMOM",
            "Instance_of": "Event",
            "Instance_description": "An event with no parameters and no return value.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An occurrence or action that is detected by a program and may trigger a response.",
            "Instance": "reqHCM",
            "Instance_of": "Event",
            "Instance_description": "An event with no parameters and no return value.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An occurrence or action that is detected by a program and may trigger a response.",
            "Instance": "reqVel",
            "Instance_of": "Event",
            "Instance_description": "An event with no parameters, but with a return value of type real.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An occurrence or action that is detected by a program and may trigger a response.",
            "Instance": "reqHdng",
            "Instance_of": "Event",
            "Instance_description": "An event with no parameters, but with a return value of type real.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Outputs\", which defines the following Events: \"advVel\" (which takes one Parameters of type \"real\", and no Return Value) and \"advHdng\" (which takes one Parameters of type \"real\", and no Return Value).",
            "GID": "Interface3",
            "Concept": "Interface",
            "Concept_description": "A shared boundary across which two or more separate components of a computer system exchange information.",
            "Instance": "Outputs",
            "Instance_of": "Interface",
            "Instance_description": "An interface within the AUV_Module defining events related to advancing velocity and heading, with parameters of type real.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Outputs\", which defines the following Events: \"advVel\" (which takes one Parameters of type \"real\", and no Return Value) and \"advHdng\" (which takes one Parameters of type \"real\", and no Return Value).",
            "GID": "Interface3",
            "Concept": "Event",
            "Concept_description": "An occurrence or action that is detected by a program and may trigger a response.",
            "Instance": "advVel",
            "Instance_of": "Event",
            "Instance_description": "An event that takes one parameter of type real and has no return value, related to advancing velocity.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Outputs\", which defines the following Events: \"advVel\" (which takes one Parameters of type \"real\", and no Return Value) and \"advHdng\" (which takes one Parameters of type \"real\", and no Return Value).",
            "GID": "Interface3",
            "Concept": "Event",
            "Concept_description": "An occurrence or action that is detected by a program and may trigger a response.",
            "Instance": "advHdng",
            "Instance_of": "Event",
            "Instance_description": "An event that takes one parameter of type real and has no return value, related to advancing heading.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Actuators\", which should remain empty at this point.",
            "GID": "Interface4",
            "Concept": "Interface",
            "Concept_description": "A shared boundary across which two or more separate components of a computer system exchange information.",
            "Instance": "Actuators",
            "Instance_of": "Interface",
            "Instance_description": "An interface within the AUV_Module that is currently empty.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Close\", to record the following values: \"horiz_cda\" (of type \"real\"), \"vert_cda\" (of type \"real\"), and \"id\" (of type \"nat\").",
            "GID": "CF3",
            "Concept": "CompositeType",
            "Concept_description": "A complex data type composed of multiple primitive types, used to represent structured data.",
            "Instance": "Close",
            "Instance_of": "CompositeType",
            "Instance_description": "A composite type representing a close object, containing values for horizontal and vertical closing distances and an identifier.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"odist\", which takes an \"Obstacle\" as input, that returns the distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F1",
            "Concept": "Function",
            "Concept_description": "A block of organized, reusable code that is used to perform a single, related action.",
            "Instance": "odist",
            "Instance_of": "Function",
            "Instance_description": "A function that calculates the distance from the AUV to a given obstacle, returning a real number.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"hdist\", which takes an \"Obstacle\" as input, that returns the horizontal distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F2",
            "Concept": "Function",
            "Concept_description": "A block of organized, reusable code that is used to perform a single, related action.",
            "Instance": "hdist",
            "Instance_of": "Function",
            "Instance_description": "A function that calculates the horizontal distance from the AUV to a given obstacle, returning a real number.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"vdist\", which takes an \"Obstacle\" as input, that returns the vertical distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F3",
            "Concept": "Function",
            "Concept_description": "A block of organized, reusable code that is used to perform a single, related action.",
            "Instance": "vdist",
            "Instance_of": "Function",
            "Instance_description": "A function that calculates the vertical distance from the AUV to a given obstacle, returning a real number.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        }
    ]
}