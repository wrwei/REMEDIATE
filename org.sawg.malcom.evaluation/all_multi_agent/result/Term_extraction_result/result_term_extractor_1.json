{
    "term_trace": [
        {
            "Requirement": "The AUV system is developed as a Module named \"AUV_Module\".",
            "GID": "SD1",
            "Concept": "Module",
            "Concept_description": "A Module is a distinct and independent unit within the AUV system that encapsulates specific functionalities.",
            "Instance": "AUV_Module",
            "Instance_of": "Module",
            "Instance_description": "AUV_Module is the specific module of the AUV system developed to encapsulate its functionalities.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Robotic Platform named \"AUV_Platform\", it should use the Interfaces \"Sensors\" and \"Actuators\" (defined by \"AUV_Module\").",
            "GID": "SD2",
            "Concept": "RoboticPlatform",
            "Concept_description": "A Robotic Platform is a base structure within the AUV system that supports and integrates various components for operation.",
            "Instance": "AUV_Platform",
            "Instance_of": "RoboticPlatform",
            "Instance_description": "AUV_Platform is the specific robotic platform within the AUV_Module that integrates necessary components for operation.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Robotic Platform named \"AUV_Platform\", it should use the Interfaces \"Sensors\" and \"Actuators\" (defined by \"AUV_Module\").",
            "GID": "SD2",
            "Concept": "Interface",
            "Concept_description": "An Interface is a point of interaction where different components of the AUV system communicate or connect.",
            "Instance": "Sensors",
            "Instance_of": "Interface",
            "Instance_description": "Sensors are interfaces within the AUV_Module that gather data from the environment.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Robotic Platform named \"AUV_Platform\", it should use the Interfaces \"Sensors\" and \"Actuators\" (defined by \"AUV_Module\").",
            "GID": "SD2",
            "Concept": "Interface",
            "Concept_description": "An Interface is a point of interaction where different components of the AUV system communicate or connect.",
            "Instance": "Actuators",
            "Instance_of": "Interface",
            "Instance_description": "Actuators are interfaces within the AUV_Module that perform actions based on received commands.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Operator\", it should use the Interface \"Inputs\" (defined by \"AUV_Module\").",
            "GID": "SD3",
            "Concept": "Controller",
            "Concept_description": "A Controller is a component within the AUV system responsible for managing operations and processing commands.",
            "Instance": "AUV_Operator",
            "Instance_of": "Controller",
            "Instance_description": "AUV_Operator is the specific controller within the AUV_Module that manages its operations and processes inputs.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Operator\", it should use the Interface \"Inputs\" (defined by \"AUV_Module\").",
            "GID": "SD3",
            "Concept": "Interface",
            "Concept_description": "An Interface is a point of interaction where different components of the AUV system communicate or connect.",
            "Instance": "Inputs",
            "Instance_of": "Interface",
            "Instance_description": "Inputs are interfaces within the AUV_Module that provide data or commands to the system.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"LRE_Ctrl\" (for Last Response Engine), it should use the Interfaces \"Inputs\" and \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD4",
            "Concept": "Controller",
            "Concept_description": "A Controller is a component within the AUV system responsible for managing operations and processing commands.",
            "Instance": "LRE_Ctrl",
            "Instance_of": "Controller",
            "Instance_description": "LRE_Ctrl is the specific controller within the AUV_Module responsible for managing the Last Response Engine operations.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"LRE_Ctrl\" (for Last Response Engine), it should use the Interfaces \"Inputs\" and \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD4",
            "Concept": "Interface",
            "Concept_description": "An Interface is a point of interaction where different components of the AUV system communicate or connect.",
            "Instance": "Inputs",
            "Instance_of": "Interface",
            "Instance_description": "Inputs are interfaces within the AUV_Module that provide data or commands to the system.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"LRE_Ctrl\" (for Last Response Engine), it should use the Interfaces \"Inputs\" and \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD4",
            "Concept": "Interface",
            "Concept_description": "An Interface is a point of interaction where different components of the AUV system communicate or connect.",
            "Instance": "Outputs",
            "Instance_of": "Interface",
            "Instance_description": "Outputs are interfaces within the AUV_Module that send data or responses from the system.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Autopilot\", it should use the Interface \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD5",
            "Concept": "Controller",
            "Concept_description": "A Controller is a component within the AUV system responsible for managing operations and processing commands.",
            "Instance": "AUV_Autopilot",
            "Instance_of": "Controller",
            "Instance_description": "AUV_Autopilot is the specific controller within the AUV_Module responsible for autonomous navigation and control.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Autopilot\", it should use the Interface \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD5",
            "Concept": "Interface",
            "Concept_description": "An Interface is a point of interaction where different components of the AUV system communicate or connect.",
            "Instance": "Outputs",
            "Instance_of": "Interface",
            "Instance_description": "Outputs are interfaces within the AUV_Module that send data or responses from the system.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"nat\" (for natural numbers).",
            "GID": "PT1",
            "Concept": "PrimitiveType",
            "Concept_description": "A Primitive Type is a basic data type provided by the system for defining variables and constants.",
            "Instance": "nat",
            "Instance_of": "PrimitiveType",
            "Instance_description": "nat is a primitive type within the AUV_Module representing natural numbers.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"int\" (for integers).",
            "GID": "PT2",
            "Concept": "PrimitiveType",
            "Concept_description": "A Primitive Type is a basic data type provided by the system for defining variables and constants.",
            "Instance": "int",
            "Instance_of": "PrimitiveType",
            "Instance_description": "int is a primitive type within the AUV_Module representing integer numbers.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"string\" (for string values).",
            "GID": "PT3",
            "Concept": "PrimitiveType",
            "Concept_description": "A Primitive Type is a basic data type provided by the system for defining variables and constants.",
            "Instance": "string",
            "Instance_of": "PrimitiveType",
            "Instance_description": "string is a primitive type within the AUV_Module representing sequences of characters.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"boolean\" (for boolean values).",
            "GID": "PT4",
            "Concept": "PrimitiveType",
            "Concept_description": "A Primitive Type is a basic data type provided by the system for defining variables and constants.",
            "Instance": "boolean",
            "Instance_of": "PrimitiveType",
            "Instance_description": "boolean is a primitive type within the AUV_Module representing true or false values.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"real\" (for real numbers).",
            "GID": "PT5",
            "Concept": "PrimitiveType",
            "Concept_description": "A Primitive Type is a basic data type provided by the system for defining variables and constants.",
            "Instance": "real",
            "Instance_of": "PrimitiveType",
            "Instance_description": "real is a primitive type within the AUV_Module representing real numbers, including fractions.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"SVec\" (Spherical Vector), to record values such as \"radial\" (of type \"real\"), \"polar\" (of type \"real\"), and \"azimuth\" (of type \"real\").",
            "GID": "CT1",
            "Concept": "CompositeType",
            "Concept_description": "A Composite Type is a complex data structure that groups together multiple variables of different types.",
            "Instance": "SVec",
            "Instance_of": "CompositeType",
            "Instance_description": "SVec is a composite type within the AUV_Module representing a spherical vector with components radial, polar, and azimuth, all of type real.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "CompositeType",
            "Concept_description": "A Composite Type is a complex data structure that groups together multiple variables of different types.",
            "Instance": "Obstacle",
            "Instance_of": "CompositeType",
            "Instance_description": "Obstacle is a composite type within the AUV_Module for recording relative distances, depth, id, and heading of an obstacle, integrating both real and SVec types.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Sensors\", which contains the following Values: \"depth\" (of type \"real\"), \"hdng\" (of type \"SVec\") and \"obs\" (of type \"Obstacle\").",
            "GID": "Interface1",
            "Concept": "Interface",
            "Concept_description": "An Interface is a point of interaction where different components of the AUV system communicate or connect.",
            "Instance": "Sensors",
            "Instance_of": "Interface",
            "Instance_description": "Sensors is an interface within the AUV_Module that provides values such as depth, heading, and obstacle information.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Interface",
            "Concept_description": "An Interface is a point of interaction where different components of the AUV system communicate or connect.",
            "Instance": "Intpus",
            "Instance_of": "Interface",
            "Instance_description": "Intpus is an interface within the AUV_Module defining events related to task management and velocity and heading requests.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An Event is an occurrence or action that is detected by the system, often triggering a response or change in state.",
            "Instance": "endTask",
            "Instance_of": "Event",
            "Instance_description": "endTask is an event defined within the Intpus interface, with no parameters and no return value.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An Event is an occurrence or action that is detected by the system, often triggering a response or change in state.",
            "Instance": "reqOCM",
            "Instance_of": "Event",
            "Instance_description": "reqOCM is an event defined within the Intpus interface, with no parameters and no return value.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An Event is an occurrence or action that is detected by the system, often triggering a response or change in state.",
            "Instance": "reqMOM",
            "Instance_of": "Event",
            "Instance_description": "reqMOM is an event defined within the Intpus interface, with no parameters and no return value.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An Event is an occurrence or action that is detected by the system, often triggering a response or change in state.",
            "Instance": "reqHCM",
            "Instance_of": "Event",
            "Instance_description": "reqHCM is an event defined within the Intpus interface, with no parameters and no return value.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An Event is an occurrence or action that is detected by the system, often triggering a response or change in state.",
            "Instance": "reqVel",
            "Instance_of": "Event",
            "Instance_description": "reqVel is an event defined within the Intpus interface, with no parameters but a return value of type real.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An Event is an occurrence or action that is detected by the system, often triggering a response or change in state.",
            "Instance": "reqHdng",
            "Instance_of": "Event",
            "Instance_description": "reqHdng is an event defined within the Intpus interface, with no parameters but a return value of type real.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Outputs\", which defines the following Events: \"advVel\" (which takes one Parameters of type \"real\", and no Return Value) and \"advHdng\" (which takes one Parameters of type \"real\", and no Return Value).",
            "GID": "Interface3",
            "Concept": "Interface",
            "Concept_description": "An Interface is a point of interaction where different components of the AUV system communicate or connect.",
            "Instance": "Outputs",
            "Instance_of": "Interface",
            "Instance_description": "Outputs is an interface within the AUV_Module defining events related to velocity and heading adjustments.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Outputs\", which defines the following Events: \"advVel\" (which takes one Parameters of type \"real\", and no Return Value) and \"advHdng\" (which takes one Parameters of type \"real\", and no Return Value).",
            "GID": "Interface3",
            "Concept": "Event",
            "Concept_description": "An Event is an occurrence or action that is detected by the system, often triggering a response or change in state.",
            "Instance": "advVel",
            "Instance_of": "Event",
            "Instance_description": "advVel is an event defined within the Outputs interface, taking one parameter of type real and no return value.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Outputs\", which defines the following Events: \"advVel\" (which takes one Parameters of type \"real\", and no Return Value) and \"advHdng\" (which takes one Parameters of type \"real\", and no Return Value).",
            "GID": "Interface3",
            "Concept": "Event",
            "Concept_description": "An Event is an occurrence or action that is detected by the system, often triggering a response or change in state.",
            "Instance": "advHdng",
            "Instance_of": "Event",
            "Instance_description": "advHdng is an event defined within the Outputs interface, taking one parameter of type real and no return value.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Actuators\", which should remain empty at this point.",
            "GID": "Interface4",
            "Concept": "Interface",
            "Concept_description": "An Interface is a point of interaction where different components of the AUV system communicate or connect.",
            "Instance": "Actuators",
            "Instance_of": "Interface",
            "Instance_description": "Actuators is an interface within the AUV_Module that is currently defined to remain empty.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Close\", to record the following values: \"horiz_cda\" (of type \"real\"), \"vert_cda\" (of type \"real\"), and \"id\" (of type \"nat\").",
            "GID": "CF3",
            "Concept": "CompositeType",
            "Concept_description": "A Composite Type is a complex data structure that groups together multiple variables of different types.",
            "Instance": "Close",
            "Instance_of": "CompositeType",
            "Instance_description": "Close is a composite type within the AUV_Module for recording horizontal and vertical collision detection areas and an identifier, integrating real and nat types.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"odist\", which takes an \"Obstacle\" as input, that returns the distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F1",
            "Concept": "Function",
            "Concept_description": "A Function is a defined operation or procedure that performs a specific task or calculation.",
            "Instance": "odist",
            "Instance_of": "Function",
            "Instance_description": "odist is a function within the AUV_Module that calculates and returns the distance from the AUV to a given obstacle.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"odist\", which takes an \"Obstacle\" as input, that returns the distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F1",
            "Concept": "Obstacle",
            "Concept_description": null,
            "Instance": "Obstacle",
            "Instance_of": "Obstacle",
            "Instance_description": "Obstacle is an input to the odist function, representing an object for which the distance is calculated.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"odist\", which takes an \"Obstacle\" as input, that returns the distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F1",
            "Concept": "PrimitiveType",
            "Concept_description": null,
            "Instance": "real",
            "Instance_of": "PrimitiveType",
            "Instance_description": "real is the return type of the odist function, representing the calculated distance.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"hdist\", which takes an \"Obstacle\" as input, that returns the horizontal distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F2",
            "Concept": "Function",
            "Concept_description": "A Function is a defined operation or procedure that performs a specific task or calculation.",
            "Instance": "hdist",
            "Instance_of": "Function",
            "Instance_description": "hdist is a function within the AUV_Module that calculates and returns the horizontal distance from the AUV to a given obstacle.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"hdist\", which takes an \"Obstacle\" as input, that returns the horizontal distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F2",
            "Concept": "Obstacle",
            "Concept_description": null,
            "Instance": "Obstacle",
            "Instance_of": "Obstacle",
            "Instance_description": "Obstacle is an input to the hdist function, representing an object for which the horizontal distance is calculated.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"hdist\", which takes an \"Obstacle\" as input, that returns the horizontal distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F2",
            "Concept": "PrimitiveType",
            "Concept_description": null,
            "Instance": "real",
            "Instance_of": "PrimitiveType",
            "Instance_description": "real is the return type of the hdist function, representing the calculated horizontal distance.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"vdist\", which takes an \"Obstacle\" as input, that returns the vertical distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F3",
            "Concept": "Function",
            "Concept_description": "A Function is a defined operation or procedure that performs a specific task or calculation.",
            "Instance": "vdist",
            "Instance_of": "Function",
            "Instance_description": "vdist is a function within the AUV_Module that calculates and returns the vertical distance from the AUV to a given obstacle.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"vdist\", which takes an \"Obstacle\" as input, that returns the vertical distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F3",
            "Concept": "Obstacle",
            "Concept_description": null,
            "Instance": "Obstacle",
            "Instance_of": "Obstacle",
            "Instance_description": "Obstacle is an input to the vdist function, representing an object for which the vertical distance is calculated.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"vdist\", which takes an \"Obstacle\" as input, that returns the vertical distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F3",
            "Concept": "PrimitiveType",
            "Concept_description": null,
            "Instance": "real",
            "Instance_of": "PrimitiveType",
            "Instance_description": "real is the return type of the vdist function, representing the calculated vertical distance.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        }
    ]
}