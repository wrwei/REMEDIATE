{
    "term_trace": [
        {
            "Requirement": "The AUV shall navigate autonomously to a pre-defined location.",
            "GID": "FR-001",
            "Concept": "AUV",
            "Concept_description": "Autonomous Underwater Vehicle capable of navigation.",
            "Instance": null,
            "Instance_of": null,
            "Instance_description": null,
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The AUV shall execute a \"Survey\" task and report the findings back to the base station.",
            "GID": "FR-002",
            "Concept": "Task",
            "Concept_description": "An activity or set of activities that the AUV is capable of performing.",
            "Instance": "Survey",
            "Instance_of": "Task",
            "Instance_description": "A task executed by the AUV to collect and report data.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The AUV should have a battery life of at least \"8 hours\" to ensure mission completion.",
            "GID": "NFR-001",
            "Concept": "BatteryLife",
            "Concept_description": "The duration for which the AUV's battery can sustain operations.",
            "Instance": "8 hours",
            "Instance_of": "BatteryLife",
            "Instance_description": "The minimum required battery life for the AUV.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "performance"
        },
        {
            "Requirement": "The AUV shall create a \"Map\" of the surveyed area using its visual mapping system.",
            "GID": "FR-003",
            "Concept": "Map",
            "Concept_description": "A representation of the surveyed area created by the AUV.",
            "Instance": "Map",
            "Instance_of": "Map",
            "Instance_description": "A visual representation created by the AUV.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The AUV must withstand pressures at depths of up to \"300 meters\" to ensure operational capability.",
            "GID": "NFR-002",
            "Concept": "PressureDepth",
            "Concept_description": "The depth at which the AUV can operate without failure.",
            "Instance": "300 meters",
            "Instance_of": "PressureDepth",
            "Instance_description": "The maximum depth the AUV can withstand pressure.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "durability"
        },
        {
            "Requirement": "The AUV system is developed as a Module named \"AUV_Module\".",
            "GID": "SD1",
            "Concept": "Module",
            "Concept_description": "A self-contained unit of the AUV system that encapsulates specific functionality or features.",
            "Instance": "AUV_Module",
            "Instance_of": "Module",
            "Instance_description": "The specific module of the AUV system being developed.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Robotic Platform named \"AUV_Platform\", it should use the Interfaces \"Sensors\" and \"Actuators\" (defined by \"AUV_Module\").",
            "GID": "SD2",
            "Concept": "RoboticPlatform",
            "Concept_description": "A structure within the AUV_Module that facilitates robotic operations.",
            "Instance": "AUV_Platform",
            "Instance_of": "RoboticPlatform",
            "Instance_description": "The specific robotic platform contained within the AUV_Module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Robotic Platform named \"AUV_Platform\", it should use the Interfaces \"Sensors\" and \"Actuators\" (defined by \"AUV_Module\").",
            "GID": "SD2",
            "Concept": "Interface",
            "Concept_description": "A point of interaction between the AUV_Module and its components.",
            "Instance": "Sensors",
            "Instance_of": "Interface",
            "Instance_description": "Interfaces used by the AUV_Platform for sensing operations.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Robotic Platform named \"AUV_Platform\", it should use the Interfaces \"Sensors\" and \"Actuators\" (defined by \"AUV_Module\").",
            "GID": "SD2",
            "Concept": "Interface",
            "Concept_description": "A point of interaction between the AUV_Module and its components.",
            "Instance": "Actuators",
            "Instance_of": "Interface",
            "Instance_description": "Interfaces used by the AUV_Platform for actuation operations.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Operator\", it should use the Interface \"Inputs\" (defined by \"AUV_Module\").",
            "GID": "SD3",
            "Concept": "Controller",
            "Concept_description": "A component responsible for managing and directing operations within the AUV_Module.",
            "Instance": "AUV_Operator",
            "Instance_of": "Controller",
            "Instance_description": "The specific controller contained within the AUV_Module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Operator\", it should use the Interface \"Inputs\" (defined by \"AUV_Module\").",
            "GID": "SD3",
            "Concept": "Interface",
            "Concept_description": "A point of interaction between the AUV_Module and its components.",
            "Instance": "Inputs",
            "Instance_of": "Interface",
            "Instance_description": "Interface used by the AUV_Operator for receiving input data.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"LRE_Ctrl\" (for Last Response Engine), it should use the Interfaces \"Inputs\" and \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD4",
            "Concept": "Controller",
            "Concept_description": "A component responsible for managing and directing operations within the AUV_Module.",
            "Instance": "LRE_Ctrl",
            "Instance_of": "Controller",
            "Instance_description": "The specific controller for the Last Response Engine contained within the AUV_Module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"LRE_Ctrl\" (for Last Response Engine), it should use the Interfaces \"Inputs\" and \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD4",
            "Concept": "Interface",
            "Concept_description": "A point of interaction between the AUV_Module and its components.",
            "Instance": "Inputs",
            "Instance_of": "Interface",
            "Instance_description": "Interface used by the LRE_Ctrl for receiving input data.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"LRE_Ctrl\" (for Last Response Engine), it should use the Interfaces \"Inputs\" and \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD4",
            "Concept": "Interface",
            "Concept_description": "A point of interaction between the AUV_Module and its components.",
            "Instance": "Outputs",
            "Instance_of": "Interface",
            "Instance_description": "Interface used by the LRE_Ctrl for sending output data.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Autopilot\", it should use the Interface \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD5",
            "Concept": "Controller",
            "Concept_description": "A component responsible for managing and directing operations within the AUV_Module.",
            "Instance": "AUV_Autopilot",
            "Instance_of": "Controller",
            "Instance_description": "The specific controller for autopilot operations contained within the AUV_Module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Autopilot\", it should use the Interface \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD5",
            "Concept": "Interface",
            "Concept_description": "A point of interaction between the AUV_Module and its components.",
            "Instance": "Outputs",
            "Instance_of": "Interface",
            "Instance_description": "Interface used by the AUV_Autopilot for sending output data.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"nat\" (for natural numbers).",
            "GID": "PT1",
            "Concept": "PrimitiveType",
            "Concept_description": "A basic data type used within the AUV_Module to represent fundamental values.",
            "Instance": "nat",
            "Instance_of": "PrimitiveType",
            "Instance_description": "A primitive type representing natural numbers defined within the AUV_Module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"int\" (for integers).",
            "GID": "PT2",
            "Concept": "PrimitiveType",
            "Concept_description": "A basic data type used within the AUV_Module to represent fundamental values.",
            "Instance": "int",
            "Instance_of": "PrimitiveType",
            "Instance_description": "A primitive type representing integers defined within the AUV_Module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"string\" (for string values).",
            "GID": "PT3",
            "Concept": "PrimitiveType",
            "Concept_description": "A basic data type used within the AUV_Module to represent fundamental values.",
            "Instance": "string",
            "Instance_of": "PrimitiveType",
            "Instance_description": "A primitive type representing string values defined within the AUV_Module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"boolean\" (for boolean values).",
            "GID": "PT4",
            "Concept": "PrimitiveType",
            "Concept_description": "A basic data type used within the AUV_Module to represent fundamental values.",
            "Instance": "boolean",
            "Instance_of": "PrimitiveType",
            "Instance_description": "A primitive type representing boolean values defined within the AUV_Module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"real\" (for real numbers).",
            "GID": "PT5",
            "Concept": "PrimitiveType",
            "Concept_description": "A basic data type used within the AUV_Module to represent fundamental values.",
            "Instance": "real",
            "Instance_of": "PrimitiveType",
            "Instance_description": "A primitive type representing real numbers defined within the AUV_Module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"SVec\" (Spherical Vector), to record values such as \"radial\" (of type \"real\"), \"polar\" (of type \"real\"), and \"azimuth\" (of type \"real\").",
            "GID": "CT1",
            "Concept": "CompositeType",
            "Concept_description": "A complex data type used within the AUV_Module that combines multiple primitive types into a single entity.",
            "Instance": "SVec",
            "Instance_of": "CompositeType",
            "Instance_description": "A composite type representing a Spherical Vector, defined within the AUV_Module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"SVec\" (Spherical Vector), to record values such as \"radial\" (of type \"real\"), \"polar\" (of type \"real\"), and \"azimuth\" (of type \"real\").",
            "GID": "CT1",
            "Concept": "Value",
            "Concept_description": "An individual data element within a composite type.",
            "Instance": "radial",
            "Instance_of": "Value",
            "Instance_description": "A value of type real, part of the SVec composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"SVec\" (Spherical Vector), to record values such as \"radial\" (of type \"real\"), \"polar\" (of type \"real\"), and \"azimuth\" (of type \"real\").",
            "GID": "CT1",
            "Concept": "Value",
            "Concept_description": "An individual data element within a composite type.",
            "Instance": "polar",
            "Instance_of": "Value",
            "Instance_description": "A value of type real, part of the SVec composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"SVec\" (Spherical Vector), to record values such as \"radial\" (of type \"real\"), \"polar\" (of type \"real\"), and \"azimuth\" (of type \"real\").",
            "GID": "CT1",
            "Concept": "Value",
            "Concept_description": "An individual data element within a composite type.",
            "Instance": "azimuth",
            "Instance_of": "Value",
            "Instance_description": "A value of type real, part of the SVec composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "CompositeType",
            "Concept_description": "A complex data type used within the AUV_Module that combines multiple primitive and composite types into a single entity.",
            "Instance": "Obstacle",
            "Instance_of": "CompositeType",
            "Instance_description": "A composite type representing an obstacle, defined within the AUV_Module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "Value",
            "Concept_description": "An individual data element within a composite type.",
            "Instance": "ns_rel_dist",
            "Instance_of": "Value",
            "Instance_description": "A value of type real representing north-south relative distance, part of the Obstacle composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "Value",
            "Concept_description": "An individual data element within a composite type.",
            "Instance": "ew_rel_dist",
            "Instance_of": "Value",
            "Instance_description": "A value of type real representing east-west relative distance, part of the Obstacle composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "Value",
            "Concept_description": "An individual data element within a composite type.",
            "Instance": "depth",
            "Instance_of": "Value",
            "Instance_description": "A value of type real representing depth, part of the Obstacle composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "Value",
            "Concept_description": "An individual data element within a composite type.",
            "Instance": "id",
            "Instance_of": "Value",
            "Instance_description": "A value of type real representing the identifier, part of the Obstacle composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "Value",
            "Concept_description": "An individual data element within a composite type.",
            "Instance": "obs_hdng",
            "Instance_of": "Value",
            "Instance_description": "A value of type SVec representing the obstacle heading, part of the Obstacle composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Sensors\", which contains the following Values: \"depth\" (of type \"real\"), \"hdng\" (of type \"SVec\") and \"obs\" (of type \"Obstacle\").",
            "GID": "Interface1",
            "Concept": "Interface",
            "Concept_description": "A point of interaction between the AUV_Module and its components, providing specific functionalities.",
            "Instance": "Sensors",
            "Instance_of": "Interface",
            "Instance_description": "An interface within the AUV_Module that provides sensor data.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Sensors\", which contains the following Values: \"depth\" (of type \"real\"), \"hdng\" (of type \"SVec\") and \"obs\" (of type \"Obstacle\").",
            "GID": "Interface1",
            "Concept": "Value",
            "Concept_description": "An individual data element within a composite type or interface.",
            "Instance": "depth",
            "Instance_of": "Value",
            "Instance_description": "A value of type real representing depth, part of the Sensors interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Sensors\", which contains the following Values: \"depth\" (of type \"real\"), \"hdng\" (of type \"SVec\") and \"obs\" (of type \"Obstacle\").",
            "GID": "Interface1",
            "Concept": "Value",
            "Concept_description": "An individual data element within a composite type or interface.",
            "Instance": "hdng",
            "Instance_of": "Value",
            "Instance_description": "A value of type SVec representing heading, part of the Sensors interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Sensors\", which contains the following Values: \"depth\" (of type \"real\"), \"hdng\" (of type \"SVec\") and \"obs\" (of type \"Obstacle\").",
            "GID": "Interface1",
            "Concept": "Value",
            "Concept_description": "An individual data element within a composite type or interface.",
            "Instance": "obs",
            "Instance_of": "Value",
            "Instance_description": "A value of type Obstacle representing an obstacle, part of the Sensors interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Interface",
            "Concept_description": "A point of interaction between the AUV_Module and its components, providing specific functionalities.",
            "Instance": "Intpus",
            "Instance_of": "Interface",
            "Instance_description": "An interface within the AUV_Module that defines input events.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An occurrence within the interface that triggers a specific response or action.",
            "Instance": "endTask",
            "Instance_of": "Event",
            "Instance_description": "An event with no parameters and no return value, part of the Intpus interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An occurrence within the interface that triggers a specific response or action.",
            "Instance": "reqOCM",
            "Instance_of": "Event",
            "Instance_description": "An event with no parameters and no return value, part of the Intpus interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An occurrence within the interface that triggers a specific response or action.",
            "Instance": "reqMOM",
            "Instance_of": "Event",
            "Instance_description": "An event with no parameters and no return value, part of the Intpus interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An occurrence within the interface that triggers a specific response or action.",
            "Instance": "reqHCM",
            "Instance_of": "Event",
            "Instance_description": "An event with no parameters and no return value, part of the Intpus interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An occurrence within the interface that triggers a specific response or action.",
            "Instance": "reqVel",
            "Instance_of": "Event",
            "Instance_description": "An event with no parameters and a return value of type real, part of the Intpus interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An occurrence within the interface that triggers a specific response or action.",
            "Instance": "reqHdng",
            "Instance_of": "Event",
            "Instance_description": "An event with no parameters and a return value of type real, part of the Intpus interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Outputs\", which defines the following Events: \"advVel\" (which takes one Parameters of type \"real\", and no Return Value) and \"advHdng\" (which takes one Parameters of type \"real\", and no Return Value).",
            "GID": "Interface3",
            "Concept": "Interface",
            "Concept_description": "A point of interaction between the AUV_Module and its components, providing specific functionalities.",
            "Instance": "Outputs",
            "Instance_of": "Interface",
            "Instance_description": "An interface within the AUV_Module that defines output events.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Outputs\", which defines the following Events: \"advVel\" (which takes one Parameters of type \"real\", and no Return Value) and \"advHdng\" (which takes one Parameters of type \"real\", and no Return Value).",
            "GID": "Interface3",
            "Concept": "Event",
            "Concept_description": "An occurrence within the interface that triggers a specific response or action.",
            "Instance": "advVel",
            "Instance_of": "Event",
            "Instance_description": "An event that takes one parameter of type real and has no return value, part of the Outputs interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Outputs\", which defines the following Events: \"advVel\" (which takes one Parameters of type \"real\", and no Return Value) and \"advHdng\" (which takes one Parameters of type \"real\", and no Return Value).",
            "GID": "Interface3",
            "Concept": "Event",
            "Concept_description": "An occurrence within the interface that triggers a specific response or action.",
            "Instance": "advHdng",
            "Instance_of": "Event",
            "Instance_description": "An event that takes one parameter of type real and has no return value, part of the Outputs interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Actuators\", which should remain empty at this point.",
            "GID": "Interface4",
            "Concept": "Interface",
            "Concept_description": "A point of interaction between the AUV_Module and its components, providing specific functionalities.",
            "Instance": "Actuators",
            "Instance_of": "Interface",
            "Instance_description": "An interface within the AUV_Module that is currently defined to be empty.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Close\", to record the following values: \"horiz_cda\" (of type \"real\"), \"vert_cda\" (of type \"real\"), and \"id\" (of type \"nat\").",
            "GID": "CF3",
            "Concept": "CompositeType",
            "Concept_description": "A complex data type used within the AUV_Module that combines multiple primitive types into a single entity.",
            "Instance": "Close",
            "Instance_of": "CompositeType",
            "Instance_description": "A composite type representing a close proximity data structure, defined within the AUV_Module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Close\", to record the following values: \"horiz_cda\" (of type \"real\"), \"vert_cda\" (of type \"real\"), and \"id\" (of type \"nat\").",
            "GID": "CF3",
            "Concept": "Value",
            "Concept_description": "An individual data element within a composite type.",
            "Instance": "horiz_cda",
            "Instance_of": "Value",
            "Instance_description": "A value of type real representing horizontal close distance adjustment, part of the Close composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Close\", to record the following values: \"horiz_cda\" (of type \"real\"), \"vert_cda\" (of type \"real\"), and \"id\" (of type \"nat\").",
            "GID": "CF3",
            "Concept": "Value",
            "Concept_description": "An individual data element within a composite type.",
            "Instance": "vert_cda",
            "Instance_of": "Value",
            "Instance_description": "A value of type real representing vertical close distance adjustment, part of the Close composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Close\", to record the following values: \"horiz_cda\" (of type \"real\"), \"vert_cda\" (of type \"real\"), and \"id\" (of type \"nat\").",
            "GID": "CF3",
            "Concept": "Value",
            "Concept_description": "An individual data element within a composite type.",
            "Instance": "id",
            "Instance_of": "Value",
            "Instance_description": "A value of type nat representing the identifier, part of the Close composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"odist\", which takes an \"Obstacle\" as input, that returns the distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F1",
            "Concept": "Function",
            "Concept_description": "A defined procedure or routine within the AUV_Module that performs a specific task.",
            "Instance": "odist",
            "Instance_of": "Function",
            "Instance_description": "A function that calculates the distance from the AUV to the given obstacle.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"odist\", which takes an \"Obstacle\" as input, that returns the distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F1",
            "Concept": "Input",
            "Concept_description": "Data or parameters provided to a function to process and perform operations.",
            "Instance": "Obstacle",
            "Instance_of": "Input",
            "Instance_description": "An input parameter of type Obstacle for the odist function.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"odist\", which takes an \"Obstacle\" as input, that returns the distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F1",
            "Concept": "ReturnValue",
            "Concept_description": "The output or result produced by a function after execution.",
            "Instance": "real",
            "Instance_of": "ReturnValue",
            "Instance_description": "The return type of the odist function, representing the distance as a real number.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"hdist\", which takes an \"Obstacle\" as input, that returns the horizontal distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F2",
            "Concept": "Function",
            "Concept_description": "A defined procedure or routine within the AUV_Module that performs a specific task.",
            "Instance": "hdist",
            "Instance_of": "Function",
            "Instance_description": "A function that calculates the horizontal distance from the AUV to the given obstacle.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"hdist\", which takes an \"Obstacle\" as input, that returns the horizontal distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F2",
            "Concept": "Input",
            "Concept_description": "Data or parameters provided to a function to process and perform operations.",
            "Instance": "Obstacle",
            "Instance_of": "Input",
            "Instance_description": "An input parameter of type Obstacle for the hdist function.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"hdist\", which takes an \"Obstacle\" as input, that returns the horizontal distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F2",
            "Concept": "ReturnValue",
            "Concept_description": "The output or result produced by a function after execution.",
            "Instance": "real",
            "Instance_of": "ReturnValue",
            "Instance_description": "The return type of the hdist function, representing the horizontal distance as a real number.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"vdist\", which takes an \"Obstacle\" as input, that returns the vertical distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F3",
            "Concept": "Function",
            "Concept_description": "A defined procedure or routine within the AUV_Module that performs a specific task.",
            "Instance": "vdist",
            "Instance_of": "Function",
            "Instance_description": "A function that calculates the vertical distance from the AUV to the given obstacle.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"vdist\", which takes an \"Obstacle\" as input, that returns the vertical distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F3",
            "Concept": "Input",
            "Concept_description": "Data or parameters provided to a function to process and perform operations.",
            "Instance": "Obstacle",
            "Instance_of": "Input",
            "Instance_description": "An input parameter of type Obstacle for the vdist function.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"vdist\", which takes an \"Obstacle\" as input, that returns the vertical distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F3",
            "Concept": "ReturnValue",
            "Concept_description": "The output or result produced by a function after execution.",
            "Instance": "real",
            "Instance_of": "ReturnValue",
            "Instance_description": "The return type of the vdist function, representing the vertical distance as a real number.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        }
    ]
}