{
    "term_trace": [
        {
            "message": "Hello everyone! I'm ready to assist with checking the output format from Term_Extractor. Please provide the requirements and extracted terms when you're ready."
        },
        {
            "Requirement": "The AUV system is developed as a Module named \"AUV_Module\".",
            "GID": "SD1",
            "Concept": "Module",
            "Concept_description": "A Module is a distinct and independent unit that can be used to construct a system, often with a specific function or purpose.",
            "Instance": "AUV_Module",
            "Instance_of": "Module",
            "Instance_description": "AUV_Module is the specific module developed for the AUV system.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Robotic Platform named \"AUV_Platform\", it should use the Interfaces \"Sensors\" and \"Actuators\" (defined by \"AUV_Module\").",
            "GID": "SD2",
            "Concept": "RoboticPlatform",
            "Concept_description": "A Robotic Platform is a base upon which robotic systems and components are built or integrated.",
            "Instance": "AUV_Platform",
            "Instance_of": "RoboticPlatform",
            "Instance_description": "AUV_Platform is the specific robotic platform contained within the AUV_Module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Robotic Platform named \"AUV_Platform\", it should use the Interfaces \"Sensors\" and \"Actuators\" (defined by \"AUV_Module\").",
            "GID": "SD2",
            "Concept": "Interface",
            "Concept_description": "An Interface is a shared boundary across which two or more separate components of a computer system exchange information.",
            "Instance": "Sensors",
            "Instance_of": "Interface",
            "Instance_description": "Sensors are interfaces that detect and respond to input from the physical environment.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Robotic Platform named \"AUV_Platform\", it should use the Interfaces \"Sensors\" and \"Actuators\" (defined by \"AUV_Module\").",
            "GID": "SD2",
            "Concept": "Interface",
            "Concept_description": "An Interface is a shared boundary across which two or more separate components of a computer system exchange information.",
            "Instance": "Actuators",
            "Instance_of": "Interface",
            "Instance_description": "Actuators are interfaces that move or control a mechanism or system.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Operator\", it should use the Interface \"Inputs\" (defined by \"AUV_Module\").",
            "GID": "SD3",
            "Concept": "Controller",
            "Concept_description": "A Controller is a device or set of devices that manages, commands, directs, or regulates the behavior of other devices or systems.",
            "Instance": "AUV_Operator",
            "Instance_of": "Controller",
            "Instance_description": "AUV_Operator is the specific controller contained within the AUV_Module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Operator\", it should use the Interface \"Inputs\" (defined by \"AUV_Module\").",
            "GID": "SD3",
            "Concept": "Interface",
            "Concept_description": "An Interface is a shared boundary across which two or more separate components of a computer system exchange information.",
            "Instance": "Inputs",
            "Instance_of": "Interface",
            "Instance_description": "Inputs are interfaces that receive data or signals from external sources.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"LRE_Ctrl\" (for Last Response Engine), it should use the Interfaces \"Inputs\" and \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD4",
            "Concept": "Controller",
            "Concept_description": "A Controller is a device or set of devices that manages, commands, directs, or regulates the behavior of other devices or systems.",
            "Instance": "LRE_Ctrl",
            "Instance_of": "Controller",
            "Instance_description": "LRE_Ctrl is the specific controller for the Last Response Engine contained within the AUV_Module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"LRE_Ctrl\" (for Last Response Engine), it should use the Interfaces \"Inputs\" and \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD4",
            "Concept": "Interface",
            "Concept_description": "An Interface is a shared boundary across which two or more separate components of a computer system exchange information.",
            "Instance": "Inputs",
            "Instance_of": "Interface",
            "Instance_description": "Inputs are interfaces that receive data or signals from external sources.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"LRE_Ctrl\" (for Last Response Engine), it should use the Interfaces \"Inputs\" and \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD4",
            "Concept": "Interface",
            "Concept_description": "An Interface is a shared boundary across which two or more separate components of a computer system exchange information.",
            "Instance": "Outputs",
            "Instance_of": "Interface",
            "Instance_description": "Outputs are interfaces that send data or signals to external destinations.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Autopilot\", it should use the Interface \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD5",
            "Concept": "Controller",
            "Concept_description": "A Controller is a device or set of devices that manages, commands, directs, or regulates the behavior of other devices or systems.",
            "Instance": "AUV_Autopilot",
            "Instance_of": "Controller",
            "Instance_description": "AUV_Autopilot is the specific controller for autonomous operation contained within the AUV_Module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Autopilot\", it should use the Interface \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD5",
            "Concept": "Interface",
            "Concept_description": "An Interface is a shared boundary across which two or more separate components of a computer system exchange information.",
            "Instance": "Outputs",
            "Instance_of": "Interface",
            "Instance_description": "Outputs are interfaces that send data or signals to external destinations.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"nat\" (for natural numbers).",
            "GID": "PT1",
            "Concept": "PrimitiveType",
            "Concept_description": "A Primitive Type is a basic data type provided by a programming language as a basic building block.",
            "Instance": "nat",
            "Instance_of": "PrimitiveType",
            "Instance_description": "nat is a primitive type representing natural numbers defined within the AUV_Module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"int\" (for integers).",
            "GID": "PT2",
            "Concept": "PrimitiveType",
            "Concept_description": "A Primitive Type is a basic data type provided by a programming language as a basic building block.",
            "Instance": "int",
            "Instance_of": "PrimitiveType",
            "Instance_description": "int is a primitive type representing integers defined within the AUV_Module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"string\" (for string values).",
            "GID": "PT3",
            "Concept": "PrimitiveType",
            "Concept_description": "A Primitive Type is a basic data type provided by a programming language as a basic building block.",
            "Instance": "string",
            "Instance_of": "PrimitiveType",
            "Instance_description": "string is a primitive type representing string values defined within the AUV_Module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"boolean\" (for boolean values).",
            "GID": "PT4",
            "Concept": "PrimitiveType",
            "Concept_description": "A Primitive Type is a basic data type provided by a programming language as a basic building block.",
            "Instance": "boolean",
            "Instance_of": "PrimitiveType",
            "Instance_description": "boolean is a primitive type representing boolean values defined within the AUV_Module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"real\" (for real numbers).",
            "GID": "PT5",
            "Concept": "PrimitiveType",
            "Concept_description": "A Primitive Type is a basic data type provided by a programming language as a basic building block.",
            "Instance": "real",
            "Instance_of": "PrimitiveType",
            "Instance_description": "real is a primitive type representing real numbers defined within the AUV_Module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"SVec\" (Spherical Vector), to record values such as \"radial\" (of type \"real\"), \"polar\" (of type \"real\"), and \"azimuth\" (of type \"real\").",
            "GID": "CT1",
            "Concept": "CompositeType",
            "Concept_description": "A Composite Type is a complex data type composed of multiple primitive types or other composite types.",
            "Instance": "SVec",
            "Instance_of": "CompositeType",
            "Instance_description": "SVec is a composite type representing a spherical vector, defined within the AUV_Module, to record values like radial, polar, and azimuth.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"SVec\" (Spherical Vector), to record values such as \"radial\" (of type \"real\"), \"polar\" (of type \"real\"), and \"azimuth\" (of type \"real\").",
            "GID": "CT1",
            "Concept": "Value",
            "Concept_description": "A Value is a specific piece of data or information that can be recorded or manipulated.",
            "Instance": "radial",
            "Instance_of": "Value",
            "Instance_description": "radial is a value of type real recorded within the SVec composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"SVec\" (Spherical Vector), to record values such as \"radial\" (of type \"real\"), \"polar\" (of type \"real\"), and \"azimuth\" (of type \"real\").",
            "GID": "CT1",
            "Concept": "Value",
            "Concept_description": "A Value is a specific piece of data or information that can be recorded or manipulated.",
            "Instance": "polar",
            "Instance_of": "Value",
            "Instance_description": "polar is a value of type real recorded within the SVec composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"SVec\" (Spherical Vector), to record values such as \"radial\" (of type \"real\"), \"polar\" (of type \"real\"), and \"azimuth\" (of type \"real\").",
            "GID": "CT1",
            "Concept": "Value",
            "Concept_description": "A Value is a specific piece of data or information that can be recorded or manipulated.",
            "Instance": "azimuth",
            "Instance_of": "Value",
            "Instance_description": "azimuth is a value of type real recorded within the SVec composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "CompositeType",
            "Concept_description": "A Composite Type is a complex data type composed of multiple primitive types or other composite types.",
            "Instance": "Obstacle",
            "Instance_of": "CompositeType",
            "Instance_description": "Obstacle is a composite type defined within the AUV_Module to record values like ns_rel_dist, ew_rel_dist, depth, id, and obs_hdng.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "Value",
            "Concept_description": "A Value is a specific piece of data or information that can be recorded or manipulated.",
            "Instance": "ns_rel_dist",
            "Instance_of": "Value",
            "Instance_description": "ns_rel_dist is a value of type real recorded within the Obstacle composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "Value",
            "Concept_description": "A Value is a specific piece of data or information that can be recorded or manipulated.",
            "Instance": "ew_rel_dist",
            "Instance_of": "Value",
            "Instance_description": "ew_rel_dist is a value of type real recorded within the Obstacle composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "Value",
            "Concept_description": "A Value is a specific piece of data or information that can be recorded or manipulated.",
            "Instance": "depth",
            "Instance_of": "Value",
            "Instance_description": "depth is a value of type real recorded within the Obstacle composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "Value",
            "Concept_description": "A Value is a specific piece of data or information that can be recorded or manipulated.",
            "Instance": "id",
            "Instance_of": "Value",
            "Instance_description": "id is a value of type real recorded within the Obstacle composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "Value",
            "Concept_description": "A Value is a specific piece of data or information that can be recorded or manipulated.",
            "Instance": "obs_hdng",
            "Instance_of": "Value",
            "Instance_description": "obs_hdng is a value of type SVec recorded within the Obstacle composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Sensors\", which contains the following Values: \"depth\" (of type \"real\"), \"hdng\" (of type \"SVec\") and \"obs\" (of type \"Obstacle\").",
            "GID": "Interface1",
            "Concept": "Interface",
            "Concept_description": "An Interface is a shared boundary across which two or more separate components of a computer system exchange information.",
            "Instance": "Sensors",
            "Instance_of": "Interface",
            "Instance_description": "Sensors is an interface defined within the AUV_Module, containing values like depth, hdng, and obs.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Sensors\", which contains the following Values: \"depth\" (of type \"real\"), \"hdng\" (of type \"SVec\") and \"obs\" (of type \"Obstacle\").",
            "GID": "Interface1",
            "Concept": "Value",
            "Concept_description": "A Value is a specific piece of data or information that can be recorded or manipulated.",
            "Instance": "depth",
            "Instance_of": "Value",
            "Instance_description": "depth is a value of type real contained within the Sensors interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Sensors\", which contains the following Values: \"depth\" (of type \"real\"), \"hdng\" (of type \"SVec\") and \"obs\" (of type \"Obstacle\").",
            "GID": "Interface1",
            "Concept": "Value",
            "Concept_description": "A Value is a specific piece of data or information that can be recorded or manipulated.",
            "Instance": "hdng",
            "Instance_of": "Value",
            "Instance_description": "hdng is a value of type SVec contained within the Sensors interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Sensors\", which contains the following Values: \"depth\" (of type \"real\"), \"hdng\" (of type \"SVec\") and \"obs\" (of type \"Obstacle\").",
            "GID": "Interface1",
            "Concept": "Value",
            "Concept_description": "A Value is a specific piece of data or information that can be recorded or manipulated.",
            "Instance": "obs",
            "Instance_of": "Value",
            "Instance_description": "obs is a value of type Obstacle contained within the Sensors interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Interface",
            "Concept_description": "An Interface is a shared boundary across which two or more separate components of a computer system exchange information.",
            "Instance": "Intpus",
            "Instance_of": "Interface",
            "Instance_description": "Intpus is an interface defined within the AUV_Module, containing events like endTask, reqOCM, reqMOM, reqHCM, reqVel, and reqHdng.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An Event is an action or occurrence recognized by software, often triggering a response or change in state.",
            "Instance": "endTask",
            "Instance_of": "Event",
            "Instance_description": "endTask is an event with no parameters and no return value defined within the Intpus interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An Event is an action or occurrence recognized by software, often triggering a response or change in state.",
            "Instance": "reqOCM",
            "Instance_of": "Event",
            "Instance_description": "reqOCM is an event with no parameters and no return value defined within the Intpus interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An Event is an action or occurrence recognized by software, often triggering a response or change in state.",
            "Instance": "reqMOM",
            "Instance_of": "Event",
            "Instance_description": "reqMOM is an event with no parameters and no return value defined within the Intpus interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An Event is an action or occurrence recognized by software, often triggering a response or change in state.",
            "Instance": "reqHCM",
            "Instance_of": "Event",
            "Instance_description": "reqHCM is an event with no parameters and no return value defined within the Intpus interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An Event is an action or occurrence recognized by software, often triggering a response or change in state.",
            "Instance": "reqVel",
            "Instance_of": "Event",
            "Instance_description": "reqVel is an event with no parameters but with a return value of type real defined within the Intpus interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An Event is an action or occurrence recognized by software, often triggering a response or change in state.",
            "Instance": "reqHdng",
            "Instance_of": "Event",
            "Instance_description": "reqHdng is an event with no parameters but with a return value of type real defined within the Intpus interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Outputs\", which defines the following Events: \"advVel\" (which takes one Parameters of type \"real\", and no Return Value) and \"advHdng\" (which takes one Parameters of type \"real\", and no Return Value).",
            "GID": "Interface3",
            "Concept": "Interface",
            "Concept_description": "An Interface is a shared boundary across which two or more separate components of a computer system exchange information.",
            "Instance": "Outputs",
            "Instance_of": "Interface",
            "Instance_description": "Outputs is an interface defined within the AUV_Module, containing events like advVel and advHdng.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Outputs\", which defines the following Events: \"advVel\" (which takes one Parameters of type \"real\", and no Return Value) and \"advHdng\" (which takes one Parameters of type \"real\", and no Return Value).",
            "GID": "Interface3",
            "Concept": "Event",
            "Concept_description": "An Event is an action or occurrence recognized by software, often triggering a response or change in state.",
            "Instance": "advVel",
            "Instance_of": "Event",
            "Instance_description": "advVel is an event that takes one parameter of type real and has no return value, defined within the Outputs interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Outputs\", which defines the following Events: \"advVel\" (which takes one Parameters of type \"real\", and no Return Value) and \"advHdng\" (which takes one Parameters of type \"real\", and no Return Value).",
            "GID": "Interface3",
            "Concept": "Event",
            "Concept_description": "An Event is an action or occurrence recognized by software, often triggering a response or change in state.",
            "Instance": "advHdng",
            "Instance_of": "Event",
            "Instance_description": "advHdng is an event that takes one parameter of type real and has no return value, defined within the Outputs interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Actuators\", which should remain empty at this point.",
            "GID": "Interface4",
            "Concept": "Interface",
            "Concept_description": "An Interface is a shared boundary across which two or more separate components of a computer system exchange information.",
            "Instance": "Actuators",
            "Instance_of": "Interface",
            "Instance_description": "Actuators is an interface defined within the AUV_Module, which should remain empty at this point.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Close\", to record the following values: \"horiz_cda\" (of type \"real\"), \"vert_cda\" (of type \"real\"), and \"id\" (of type \"nat\").",
            "GID": "CF3",
            "Concept": "CompositeType",
            "Concept_description": "A Composite Type is a complex data type composed of multiple primitive types or other composite types.",
            "Instance": "Close",
            "Instance_of": "CompositeType",
            "Instance_description": "Close is a composite type defined within the AUV_Module to record values like horiz_cda, vert_cda, and id.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Close\", to record the following values: \"horiz_cda\" (of type \"real\"), \"vert_cda\" (of type \"real\"), and \"id\" (of type \"nat\").",
            "GID": "CF3",
            "Concept": "Value",
            "Concept_description": "A Value is a specific piece of data or information that can be recorded or manipulated.",
            "Instance": "horiz_cda",
            "Instance_of": "Value",
            "Instance_description": "horiz_cda is a value of type real recorded within the Close composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Close\", to record the following values: \"horiz_cda\" (of type \"real\"), \"vert_cda\" (of type \"real\"), and \"id\" (of type \"nat\").",
            "GID": "CF3",
            "Concept": "Value",
            "Concept_description": "A Value is a specific piece of data or information that can be recorded or manipulated.",
            "Instance": "vert_cda",
            "Instance_of": "Value",
            "Instance_description": "vert_cda is a value of type real recorded within the Close composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Close\", to record the following values: \"horiz_cda\" (of type \"real\"), \"vert_cda\" (of type \"real\"), and \"id\" (of type \"nat\").",
            "GID": "CF3",
            "Concept": "Value",
            "Concept_description": "A Value is a specific piece of data or information that can be recorded or manipulated.",
            "Instance": "id",
            "Instance_of": "Value",
            "Instance_description": "id is a value of type nat recorded within the Close composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"odist\", which takes an \"Obstacle\" as input, that returns the distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F1",
            "Concept": "Function",
            "Concept_description": "A Function is a block of code designed to perform a particular task, often taking inputs and returning an output.",
            "Instance": "odist",
            "Instance_of": "Function",
            "Instance_description": "odist is a function that takes an Obstacle as input and returns the distance from the AUV to the Obstacle as a real number.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"hdist\", which takes an \"Obstacle\" as input, that returns the horizontal distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F2",
            "Concept": "Function",
            "Concept_description": "A Function is a block of code designed to perform a particular task, often taking inputs and returning an output.",
            "Instance": "hdist",
            "Instance_of": "Function",
            "Instance_description": "hdist is a function that takes an Obstacle as input and returns the horizontal distance from the AUV to the Obstacle as a real number.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"vdist\", which takes an \"Obstacle\" as input, that returns the vertical distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F3",
            "Concept": "Function",
            "Concept_description": "A Function is a block of code designed to perform a particular task, often taking inputs and returning an output.",
            "Instance": "vdist",
            "Instance_of": "Function",
            "Instance_description": "vdist is a function that takes an Obstacle as input and returns the vertical distance from the AUV to the Obstacle as a real number.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        }
    ]
}