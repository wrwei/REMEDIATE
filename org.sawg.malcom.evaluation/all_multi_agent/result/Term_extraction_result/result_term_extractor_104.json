{
    "term_trace": [
        {
            "Requirement": "The AUV system is developed as a Module named \"AUV_Module\".",
            "GID": "SD1",
            "Concept": "Module",
            "Concept_description": "A Module is a distinct and independent unit of the AUV system that encapsulates specific functionalities or services.",
            "Instance": "AUV_Module",
            "Instance_of": "Module",
            "Instance_description": "AUV_Module is the Module of the AUV system.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Robotic Platform named \"AUV_Platform\", it should use the Interfaces \"Sensors\" and \"Actuators\" (defined by \"AUV_Module\").",
            "GID": "SD2",
            "Concept": "RoboticPlatform",
            "Concept_description": "A Robotic Platform is a foundational framework within the AUV_Module that supports the integration and operation of robotic components.",
            "Instance": "AUV_Platform",
            "Instance_of": "RoboticPlatform",
            "Instance_description": "AUV_Platform is the Robotic Platform contained within the AUV_Module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Robotic Platform named \"AUV_Platform\", it should use the Interfaces \"Sensors\" and \"Actuators\" (defined by \"AUV_Module\").",
            "GID": "SD2",
            "Concept": "Interface",
            "Concept_description": "An Interface is a point of interaction that allows different components within the AUV system to communicate and operate together.",
            "Instance": "Sensors",
            "Instance_of": "Interface",
            "Instance_description": "Sensors are Interfaces used by the AUV_Platform to gather environmental data.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Robotic Platform named \"AUV_Platform\", it should use the Interfaces \"Sensors\" and \"Actuators\" (defined by \"AUV_Module\").",
            "GID": "SD2",
            "Concept": "Interface",
            "Concept_description": "An Interface is a point of interaction that allows different components within the AUV system to communicate and operate together.",
            "Instance": "Actuators",
            "Instance_of": "Interface",
            "Instance_description": "Actuators are Interfaces used by the AUV_Platform to perform physical actions.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Operator\", it should use the Interface \"Inputs\" (defined by \"AUV_Module\").",
            "GID": "SD3",
            "Concept": "Controller",
            "Concept_description": "A Controller is a component within the AUV_Module responsible for managing and directing the operations of the AUV system.",
            "Instance": "AUV_Operator",
            "Instance_of": "Controller",
            "Instance_description": "AUV_Operator is the Controller contained within the AUV_Module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Operator\", it should use the Interface \"Inputs\" (defined by \"AUV_Module\").",
            "GID": "SD3",
            "Concept": "Interface",
            "Concept_description": "An Interface is a point of interaction that allows different components within the AUV system to communicate and operate together.",
            "Instance": "Inputs",
            "Instance_of": "Interface",
            "Instance_description": "Inputs are Interfaces used by the AUV_Operator to receive data and commands.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"LRE_Ctrl\" (for Last Response Engine), it should use the Interfaces \"Inputs\" and \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD4",
            "Concept": "Controller",
            "Concept_description": "A Controller is a component within the AUV_Module responsible for managing and directing the operations of the AUV system.",
            "Instance": "LRE_Ctrl",
            "Instance_of": "Controller",
            "Instance_description": "LRE_Ctrl is the Controller for the Last Response Engine contained within the AUV_Module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"LRE_Ctrl\" (for Last Response Engine), it should use the Interfaces \"Inputs\" and \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD4",
            "Concept": "Interface",
            "Concept_description": "An Interface is a point of interaction that allows different components within the AUV system to communicate and operate together.",
            "Instance": "Inputs",
            "Instance_of": "Interface",
            "Instance_description": "Inputs are Interfaces used by the LRE_Ctrl to receive data and commands.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"LRE_Ctrl\" (for Last Response Engine), it should use the Interfaces \"Inputs\" and \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD4",
            "Concept": "Interface",
            "Concept_description": "An Interface is a point of interaction that allows different components within the AUV system to communicate and operate together.",
            "Instance": "Outputs",
            "Instance_of": "Interface",
            "Instance_description": "Outputs are Interfaces used by the LRE_Ctrl to send data and responses.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Autopilot\", it should use the Interface \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD5",
            "Concept": "Controller",
            "Concept_description": "A Controller is a component within the AUV_Module responsible for managing and directing the operations of the AUV system.",
            "Instance": "AUV_Autopilot",
            "Instance_of": "Controller",
            "Instance_description": "AUV_Autopilot is the Controller contained within the AUV_Module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Autopilot\", it should use the Interface \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD5",
            "Concept": "Interface",
            "Concept_description": "An Interface is a point of interaction that allows different components within the AUV system to communicate and operate together.",
            "Instance": "Outputs",
            "Instance_of": "Interface",
            "Instance_description": "Outputs are Interfaces used by the AUV_Autopilot to send data and responses.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"nat\" (for natural numbers).",
            "GID": "PT1",
            "Concept": "PrimitiveType",
            "Concept_description": "A Primitive Type is a basic data type provided by the AUV_Module for representing simple values.",
            "Instance": "nat",
            "Instance_of": "PrimitiveType",
            "Instance_description": "nat is a Primitive Type defined by the AUV_Module for representing natural numbers.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"int\" (for integers).",
            "GID": "PT2",
            "Concept": "PrimitiveType",
            "Concept_description": "A Primitive Type is a basic data type provided by the AUV_Module for representing simple values.",
            "Instance": "int",
            "Instance_of": "PrimitiveType",
            "Instance_description": "int is a Primitive Type defined by the AUV_Module for representing integers.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"string\" (for string values).",
            "GID": "PT3",
            "Concept": "PrimitiveType",
            "Concept_description": "A Primitive Type is a basic data type provided by the AUV_Module for representing simple values.",
            "Instance": "string",
            "Instance_of": "PrimitiveType",
            "Instance_description": "string is a Primitive Type defined by the AUV_Module for representing string values.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"boolean\" (for boolean values).",
            "GID": "PT4",
            "Concept": "PrimitiveType",
            "Concept_description": "A Primitive Type is a basic data type provided by the AUV_Module for representing simple values.",
            "Instance": "boolean",
            "Instance_of": "PrimitiveType",
            "Instance_description": "boolean is a Primitive Type defined by the AUV_Module for representing boolean values.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"real\" (for real numbers).",
            "GID": "PT5",
            "Concept": "PrimitiveType",
            "Concept_description": "A Primitive Type is a basic data type provided by the AUV_Module for representing simple values.",
            "Instance": "real",
            "Instance_of": "PrimitiveType",
            "Instance_description": "real is a Primitive Type defined by the AUV_Module for representing real numbers.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"SVec\" (Spherical Vector), to record values such as \"radial\" (of type \"real\"), \"polar\" (of type \"real\"), and \"azimuth\" (of type \"real\").",
            "GID": "CT1",
            "Concept": "CompositeType",
            "Concept_description": "A Composite Type is a complex data type provided by the AUV_Module that aggregates multiple values or elements.",
            "Instance": "SVec",
            "Instance_of": "CompositeType",
            "Instance_description": "SVec is a Composite Type defined by the AUV_Module for representing Spherical Vectors, including values such as radial, polar, and azimuth.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"SVec\" (Spherical Vector), to record values such as \"radial\" (of type \"real\"), \"polar\" (of type \"real\"), and \"azimuth\" (of type \"real\").",
            "GID": "CT1",
            "Concept": "Value",
            "Concept_description": "A Value is a specific data element that can be part of a Composite Type.",
            "Instance": "radial",
            "Instance_of": "Value",
            "Instance_description": "radial is a Value of type real, part of the SVec Composite Type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"SVec\" (Spherical Vector), to record values such as \"radial\" (of type \"real\"), \"polar\" (of type \"real\"), and \"azimuth\" (of type \"real\").",
            "GID": "CT1",
            "Concept": "Value",
            "Concept_description": "A Value is a specific data element that can be part of a Composite Type.",
            "Instance": "polar",
            "Instance_of": "Value",
            "Instance_description": "polar is a Value of type real, part of the SVec Composite Type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"SVec\" (Spherical Vector), to record values such as \"radial\" (of type \"real\"), \"polar\" (of type \"real\"), and \"azimuth\" (of type \"real\").",
            "GID": "CT1",
            "Concept": "Value",
            "Concept_description": "A Value is a specific data element that can be part of a Composite Type.",
            "Instance": "azimuth",
            "Instance_of": "Value",
            "Instance_description": "azimuth is a Value of type real, part of the SVec Composite Type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "CompositeType",
            "Concept_description": "A Composite Type is a complex data type provided by the AUV_Module that aggregates multiple values or elements.",
            "Instance": "Obstacle",
            "Instance_of": "CompositeType",
            "Instance_description": "Obstacle is a Composite Type defined by the AUV_Module for representing obstacles, including values such as ns_rel_dist, ew_rel_dist, depth, id, and obs_hdng.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "Value",
            "Concept_description": "A Value is a specific data element that can be part of a Composite Type.",
            "Instance": "ns_rel_dist",
            "Instance_of": "Value",
            "Instance_description": "ns_rel_dist is a Value of type real, part of the Obstacle Composite Type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "Value",
            "Concept_description": "A Value is a specific data element that can be part of a Composite Type.",
            "Instance": "ew_rel_dist",
            "Instance_of": "Value",
            "Instance_description": "ew_rel_dist is a Value of type real, part of the Obstacle Composite Type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "Value",
            "Concept_description": "A Value is a specific data element that can be part of a Composite Type.",
            "Instance": "depth",
            "Instance_of": "Value",
            "Instance_description": "depth is a Value of type real, part of the Obstacle Composite Type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "Value",
            "Concept_description": "A Value is a specific data element that can be part of a Composite Type.",
            "Instance": "id",
            "Instance_of": "Value",
            "Instance_description": "id is a Value of type real, part of the Obstacle Composite Type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "Value",
            "Concept_description": "A Value is a specific data element that can be part of a Composite Type.",
            "Instance": "obs_hdng",
            "Instance_of": "Value",
            "Instance_description": "obs_hdng is a Value of type SVec, part of the Obstacle Composite Type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Sensors\", which contains the following Values: \"depth\" (of type \"real\"), \"hdng\" (of type \"SVec\") and \"obs\" (of type \"Obstacle\").",
            "GID": "Interface1",
            "Concept": "Interface",
            "Concept_description": "An Interface is a point of interaction that allows different components within the AUV system to communicate and operate together.",
            "Instance": "Sensors",
            "Instance_of": "Interface",
            "Instance_description": "Sensors is an Interface defined by the AUV_Module, containing values such as depth, hdng, and obs.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Sensors\", which contains the following Values: \"depth\" (of type \"real\"), \"hdng\" (of type \"SVec\") and \"obs\" (of type \"Obstacle\").",
            "GID": "Interface1",
            "Concept": "Value",
            "Concept_description": "A Value is a specific data element that can be part of a Composite Type or Interface.",
            "Instance": "depth",
            "Instance_of": "Value",
            "Instance_description": "depth is a Value of type real, part of the Sensors Interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Sensors\", which contains the following Values: \"depth\" (of type \"real\"), \"hdng\" (of type \"SVec\") and \"obs\" (of type \"Obstacle\").",
            "GID": "Interface1",
            "Concept": "Value",
            "Concept_description": "A Value is a specific data element that can be part of a Composite Type or Interface.",
            "Instance": "hdng",
            "Instance_of": "Value",
            "Instance_description": "hdng is a Value of type SVec, part of the Sensors Interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Sensors\", which contains the following Values: \"depth\" (of type \"real\"), \"hdng\" (of type \"SVec\") and \"obs\" (of type \"Obstacle\").",
            "GID": "Interface1",
            "Concept": "Value",
            "Concept_description": "A Value is a specific data element that can be part of a Composite Type or Interface.",
            "Instance": "obs",
            "Instance_of": "Value",
            "Instance_description": "obs is a Value of type Obstacle, part of the Sensors Interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Interface",
            "Concept_description": "An Interface is a point of interaction that allows different components within the AUV system to communicate and operate together.",
            "Instance": "Intpus",
            "Instance_of": "Interface",
            "Instance_description": "Intpus is an Interface defined by the AUV_Module, containing events such as endTask, reqOCM, reqMOM, reqHCM, reqVel, and reqHdng.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An Event is an action or occurrence recognized by the system, often triggered by the user or system.",
            "Instance": "endTask",
            "Instance_of": "Event",
            "Instance_description": "endTask is an Event with no Parameters and no Return Value, part of the Intpus Interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An Event is an action or occurrence recognized by the system, often triggered by the user or system.",
            "Instance": "reqOCM",
            "Instance_of": "Event",
            "Instance_description": "reqOCM is an Event with no Parameters and no Return Value, part of the Intpus Interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An Event is an action or occurrence recognized by the system, often triggered by the user or system.",
            "Instance": "reqMOM",
            "Instance_of": "Event",
            "Instance_description": "reqMOM is an Event with no Parameters and no Return Value, part of the Intpus Interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An Event is an action or occurrence recognized by the system, often triggered by the user or system.",
            "Instance": "reqHCM",
            "Instance_of": "Event",
            "Instance_description": "reqHCM is an Event with no Parameters and no Return Value, part of the Intpus Interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An Event is an action or occurrence recognized by the system, often triggered by the user or system.",
            "Instance": "reqVel",
            "Instance_of": "Event",
            "Instance_description": "reqVel is an Event with no Parameters but with a Return Value of type real, part of the Intpus Interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An Event is an action or occurrence recognized by the system, often triggered by the user or system.",
            "Instance": "reqHdng",
            "Instance_of": "Event",
            "Instance_description": "reqHdng is an Event with no Parameters but with a Return Value of type real, part of the Intpus Interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Outputs\", which defines the following Events: \"advVel\" (which takes one Parameters of type \"real\", and no Return Value) and \"advHdng\" (which takes one Parameters of type \"real\", and no Return Value).",
            "GID": "Interface3",
            "Concept": "Interface",
            "Concept_description": "An Interface is a point of interaction that allows different components within the AUV system to communicate and operate together.",
            "Instance": "Outputs",
            "Instance_of": "Interface",
            "Instance_description": "Outputs is an Interface defined by the AUV_Module, containing events such as advVel and advHdng.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Outputs\", which defines the following Events: \"advVel\" (which takes one Parameters of type \"real\", and no Return Value) and \"advHdng\" (which takes one Parameters of type \"real\", and no Return Value).",
            "GID": "Interface3",
            "Concept": "Event",
            "Concept_description": "An Event is an action or occurrence recognized by the system, often triggered by the user or system.",
            "Instance": "advVel",
            "Instance_of": "Event",
            "Instance_description": "advVel is an Event that takes one Parameter of type real and has no Return Value, part of the Outputs Interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Outputs\", which defines the following Events: \"advVel\" (which takes one Parameters of type \"real\", and no Return Value) and \"advHdng\" (which takes one Parameters of type \"real\", and no Return Value).",
            "GID": "Interface3",
            "Concept": "Event",
            "Concept_description": "An Event is an action or occurrence recognized by the system, often triggered by the user or system.",
            "Instance": "advHdng",
            "Instance_of": "Event",
            "Instance_description": "advHdng is an Event that takes one Parameter of type real and has no Return Value, part of the Outputs Interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Actuators\", which should remain empty at this point.",
            "GID": "Interface4",
            "Concept": "Interface",
            "Concept_description": "An Interface is a point of interaction that allows different components within the AUV system to communicate and operate together.",
            "Instance": "Actuators",
            "Instance_of": "Interface",
            "Instance_description": "Actuators is an Interface defined by the AUV_Module, which is currently empty.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Close\", to record the following values: \"horiz_cda\" (of type \"real\"), \"vert_cda\" (of type \"real\"), and \"id\" (of type \"nat\").",
            "GID": "CF3",
            "Concept": "CompositeType",
            "Concept_description": "A Composite Type is a complex data type provided by the AUV_Module that aggregates multiple values or elements.",
            "Instance": "Close",
            "Instance_of": "CompositeType",
            "Instance_description": "Close is a Composite Type defined by the AUV_Module for representing close proximity data, including values such as horiz_cda, vert_cda, and id.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Close\", to record the following values: \"horiz_cda\" (of type \"real\"), \"vert_cda\" (of type \"real\"), and \"id\" (of type \"nat\").",
            "GID": "CF3",
            "Concept": "Value",
            "Concept_description": "A Value is a specific data element that can be part of a Composite Type.",
            "Instance": "horiz_cda",
            "Instance_of": "Value",
            "Instance_description": "horiz_cda is a Value of type real, part of the Close Composite Type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Close\", to record the following values: \"horiz_cda\" (of type \"real\"), \"vert_cda\" (of type \"real\"), and \"id\" (of type \"nat\").",
            "GID": "CF3",
            "Concept": "Value",
            "Concept_description": "A Value is a specific data element that can be part of a Composite Type.",
            "Instance": "vert_cda",
            "Instance_of": "Value",
            "Instance_description": "vert_cda is a Value of type real, part of the Close Composite Type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Close\", to record the following values: \"horiz_cda\" (of type \"real\"), \"vert_cda\" (of type \"real\"), and \"id\" (of type \"nat\").",
            "GID": "CF3",
            "Concept": "Value",
            "Concept_description": "A Value is a specific data element that can be part of a Composite Type.",
            "Instance": "id",
            "Instance_of": "Value",
            "Instance_description": "id is a Value of type nat, part of the Close Composite Type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"odist\", which takes an \"Obstacle\" as input, that returns the distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F1",
            "Concept": "Function",
            "Concept_description": "A Function is a defined operation or procedure within the AUV_Module that performs a specific task.",
            "Instance": "odist",
            "Instance_of": "Function",
            "Instance_description": "odist is a Function that calculates the distance from the AUV to an Obstacle, taking an Obstacle as input and returning a real value.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"hdist\", which takes an \"Obstacle\" as input, that returns the horizontal distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F2",
            "Concept": "Function",
            "Concept_description": "A Function is a defined operation or procedure within the AUV_Module that performs a specific task.",
            "Instance": "hdist",
            "Instance_of": "Function",
            "Instance_description": "hdist is a Function that calculates the horizontal distance from the AUV to an Obstacle, taking an Obstacle as input and returning a real value.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"vdist\", which takes an \"Obstacle\" as input, that returns the vertical distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F3",
            "Concept": "Function",
            "Concept_description": "A Function is a defined operation or procedure within the AUV_Module that performs a specific task.",
            "Instance": "vdist",
            "Instance_of": "Function",
            "Instance_description": "vdist is a Function that calculates the vertical distance from the AUV to an Obstacle, taking an Obstacle as input and returning a real value.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        }
    ]
}