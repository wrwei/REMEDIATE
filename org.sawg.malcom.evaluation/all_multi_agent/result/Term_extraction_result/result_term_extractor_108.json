{
    "term_trace": [
        {
            "Requirement": "The AUV system is developed as a Module named \"AUV_Module\".",
            "GID": "SD1",
            "Concept": "Module",
            "Concept_description": "A distinct and self-contained unit within the AUV system that encapsulates specific functionality or data.",
            "Instance": "AUV_Module",
            "Instance_of": "Module",
            "Instance_description": "The specific module within the AUV system developed for autonomous underwater operations.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Robotic Platform named \"AUV_Platform\", it should use the Interfaces \"Sensors\" and \"Actuators\" (defined by \"AUV_Module\").",
            "GID": "SD2",
            "Concept": "RoboticPlatform",
            "Concept_description": "A foundational structure within the AUV_Module that provides the necessary hardware and software environment for robotic operations.",
            "Instance": "AUV_Platform",
            "Instance_of": "RoboticPlatform",
            "Instance_description": "The specific robotic platform within the AUV_Module that facilitates autonomous underwater vehicle operations.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Robotic Platform named \"AUV_Platform\", it should use the Interfaces \"Sensors\" and \"Actuators\" (defined by \"AUV_Module\").",
            "GID": "SD2",
            "Concept": "Interface",
            "Concept_description": "A point of interaction where different components of the AUV system communicate with each other.",
            "Instance": "Sensors",
            "Instance_of": "Interface",
            "Instance_description": "Interfaces within the AUV_Module that gather environmental data for the AUV.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Robotic Platform named \"AUV_Platform\", it should use the Interfaces \"Sensors\" and \"Actuators\" (defined by \"AUV_Module\").",
            "GID": "SD2",
            "Concept": "Interface",
            "Concept_description": "A point of interaction where different components of the AUV system communicate with each other.",
            "Instance": "Actuators",
            "Instance_of": "Interface",
            "Instance_description": "Interfaces within the AUV_Module that control the movement and actions of the AUV.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Operator\", it should use the Interface \"Inputs\" (defined by \"AUV_Module\").",
            "GID": "SD3",
            "Concept": "Controller",
            "Concept_description": "A component within the AUV_Module responsible for managing and directing the operations and responses of the AUV.",
            "Instance": "AUV_Operator",
            "Instance_of": "Controller",
            "Instance_description": "The specific controller within the AUV_Module that oversees the operation of the autonomous underwater vehicle.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Operator\", it should use the Interface \"Inputs\" (defined by \"AUV_Module\").",
            "GID": "SD3",
            "Concept": "Interface",
            "Concept_description": "A point of interaction where different components of the AUV system communicate with each other.",
            "Instance": "Inputs",
            "Instance_of": "Interface",
            "Instance_description": "Interfaces within the AUV_Module that provide data and commands to the AUV.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"LRE_Ctrl\" (for Last Response Engine), it should use the Interfaces \"Inputs\" and \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD4",
            "Concept": "Controller",
            "Concept_description": "A component within the AUV_Module responsible for managing and directing the operations and responses of the AUV.",
            "Instance": "LRE_Ctrl",
            "Instance_of": "Controller",
            "Instance_description": "The specific controller within the AUV_Module designed for handling the last response engine operations.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"LRE_Ctrl\" (for Last Response Engine), it should use the Interfaces \"Inputs\" and \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD4",
            "Concept": "Interface",
            "Concept_description": "A point of interaction where different components of the AUV system communicate with each other.",
            "Instance": "Inputs",
            "Instance_of": "Interface",
            "Instance_description": "Interfaces within the AUV_Module that provide data and commands to the AUV.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"LRE_Ctrl\" (for Last Response Engine), it should use the Interfaces \"Inputs\" and \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD4",
            "Concept": "Interface",
            "Concept_description": "A point of interaction where different components of the AUV system communicate with each other.",
            "Instance": "Outputs",
            "Instance_of": "Interface",
            "Instance_description": "Interfaces within the AUV_Module that deliver responses and actions from the AUV.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Autopilot\", it should use the Interface \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD5",
            "Concept": "Controller",
            "Concept_description": "A component within the AUV_Module responsible for managing and directing the operations and responses of the AUV.",
            "Instance": "AUV_Autopilot",
            "Instance_of": "Controller",
            "Instance_description": "The specific controller within the AUV_Module designed to automate the navigation and operation of the autonomous underwater vehicle.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Autopilot\", it should use the Interface \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD5",
            "Concept": "Interface",
            "Concept_description": "A point of interaction where different components of the AUV system communicate with each other.",
            "Instance": "Outputs",
            "Instance_of": "Interface",
            "Instance_description": "Interfaces within the AUV_Module that deliver responses and actions from the AUV.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"nat\" (for natural numbers).",
            "GID": "PT1",
            "Concept": "PrimitiveType",
            "Concept_description": "A basic data type provided by the AUV_Module that represents simple values.",
            "Instance": "nat",
            "Instance_of": "PrimitiveType",
            "Instance_description": "A primitive type within the AUV_Module representing natural numbers.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"int\" (for integers).",
            "GID": "PT2",
            "Concept": "PrimitiveType",
            "Concept_description": "A basic data type provided by the AUV_Module that represents simple values.",
            "Instance": "int",
            "Instance_of": "PrimitiveType",
            "Instance_description": "A primitive type within the AUV_Module representing integers.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"string\" (for string values).",
            "GID": "PT3",
            "Concept": "PrimitiveType",
            "Concept_description": "A basic data type provided by the AUV_Module that represents simple values.",
            "Instance": "string",
            "Instance_of": "PrimitiveType",
            "Instance_description": "A primitive type within the AUV_Module representing string values.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"boolean\" (for boolean values).",
            "GID": "PT4",
            "Concept": "PrimitiveType",
            "Concept_description": "A basic data type provided by the AUV_Module that represents simple values.",
            "Instance": "boolean",
            "Instance_of": "PrimitiveType",
            "Instance_description": "A primitive type within the AUV_Module representing boolean values.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"real\" (for real numbers).",
            "GID": "PT5",
            "Concept": "PrimitiveType",
            "Concept_description": "A basic data type provided by the AUV_Module that represents simple values.",
            "Instance": "real",
            "Instance_of": "PrimitiveType",
            "Instance_description": "A primitive type within the AUV_Module representing real numbers.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"SVec\" (Spherical Vector), to record values such as \"radial\" (of type \"real\"), \"polar\" (of type \"real\"), and \"azimuth\" (of type \"real\").",
            "GID": "CT1",
            "Concept": "CompositeType",
            "Concept_description": "A complex data type in the AUV_Module composed of multiple primitive types to represent structured data.",
            "Instance": "SVec",
            "Instance_of": "CompositeType",
            "Instance_description": "A composite type within the AUV_Module representing a spherical vector, used to store spherical coordinates.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"SVec\" (Spherical Vector), to record values such as \"radial\" (of type \"real\"), \"polar\" (of type \"real\"), and \"azimuth\" (of type \"real\").",
            "GID": "CT1",
            "Concept": "Value",
            "Concept_description": "An element within a composite type representing a specific data point.",
            "Instance": "radial",
            "Instance_of": "Value",
            "Instance_description": "A value within the SVec composite type representing the radial component, of type real.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"SVec\" (Spherical Vector), to record values such as \"radial\" (of type \"real\"), \"polar\" (of type \"real\"), and \"azimuth\" (of type \"real\").",
            "GID": "CT1",
            "Concept": "Value",
            "Concept_description": "An element within a composite type representing a specific data point.",
            "Instance": "polar",
            "Instance_of": "Value",
            "Instance_description": "A value within the SVec composite type representing the polar component, of type real.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"SVec\" (Spherical Vector), to record values such as \"radial\" (of type \"real\"), \"polar\" (of type \"real\"), and \"azimuth\" (of type \"real\").",
            "GID": "CT1",
            "Concept": "Value",
            "Concept_description": "An element within a composite type representing a specific data point.",
            "Instance": "azimuth",
            "Instance_of": "Value",
            "Instance_description": "A value within the SVec composite type representing the azimuth component, of type real.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "CompositeType",
            "Concept_description": "A complex data type in the AUV_Module composed of multiple primitive types to represent structured data.",
            "Instance": "Obstacle",
            "Instance_of": "CompositeType",
            "Instance_description": "A composite type within the AUV_Module representing an obstacle, used to store various attributes of detected obstacles.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "Value",
            "Concept_description": "An element within a composite type representing a specific data point.",
            "Instance": "ns_rel_dist",
            "Instance_of": "Value",
            "Instance_description": "A value within the Obstacle composite type representing the north-south relative distance, of type real.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "Value",
            "Concept_description": "An element within a composite type representing a specific data point.",
            "Instance": "ew_rel_dist",
            "Instance_of": "Value",
            "Instance_description": "A value within the Obstacle composite type representing the east-west relative distance, of type real.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "Value",
            "Concept_description": "An element within a composite type representing a specific data point.",
            "Instance": "depth",
            "Instance_of": "Value",
            "Instance_description": "A value within the Obstacle composite type representing the depth, of type real.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "Value",
            "Concept_description": "An element within a composite type representing a specific data point.",
            "Instance": "id",
            "Instance_of": "Value",
            "Instance_description": "A value within the Obstacle composite type representing the identifier, of type real.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "Value",
            "Concept_description": "An element within a composite type representing a specific data point.",
            "Instance": "obs_hdng",
            "Instance_of": "Value",
            "Instance_description": "A value within the Obstacle composite type representing the obstacle heading, of type SVec.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Sensors\", which contains the following Values: \"depth\" (of type \"real\"), \"hdng\" (of type \"SVec\") and \"obs\" (of type \"Obstacle\").",
            "GID": "Interface1",
            "Concept": "Interface",
            "Concept_description": "A point of interaction where different components of the AUV system communicate with each other.",
            "Instance": "Sensors",
            "Instance_of": "Interface",
            "Instance_description": "An interface within the AUV_Module designed to gather environmental data through various sensors.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Sensors\", which contains the following Values: \"depth\" (of type \"real\"), \"hdng\" (of type \"SVec\") and \"obs\" (of type \"Obstacle\").",
            "GID": "Interface1",
            "Concept": "Value",
            "Concept_description": "An element within a composite type or interface representing a specific data point.",
            "Instance": "depth",
            "Instance_of": "Value",
            "Instance_description": "A value within the Sensors interface representing the depth, of type real.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Sensors\", which contains the following Values: \"depth\" (of type \"real\"), \"hdng\" (of type \"SVec\") and \"obs\" (of type \"Obstacle\").",
            "GID": "Interface1",
            "Concept": "Value",
            "Concept_description": "An element within a composite type or interface representing a specific data point.",
            "Instance": "hdng",
            "Instance_of": "Value",
            "Instance_description": "A value within the Sensors interface representing the heading, of type SVec.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Sensors\", which contains the following Values: \"depth\" (of type \"real\"), \"hdng\" (of type \"SVec\") and \"obs\" (of type \"Obstacle\").",
            "GID": "Interface1",
            "Concept": "Value",
            "Concept_description": "An element within a composite type or interface representing a specific data point.",
            "Instance": "obs",
            "Instance_of": "Value",
            "Instance_description": "A value within the Sensors interface representing the obstacle, of type Obstacle.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Interface",
            "Concept_description": "A point of interaction where different components of the AUV system communicate with each other.",
            "Instance": "Intpus",
            "Instance_of": "Interface",
            "Instance_description": "An interface within the AUV_Module designed to handle input events and commands.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An occurrence within an interface that triggers a specific action or response.",
            "Instance": "endTask",
            "Instance_of": "Event",
            "Instance_description": "An event within the Intpus interface that signals the end of a task, with no parameters and no return value.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An occurrence within an interface that triggers a specific action or response.",
            "Instance": "reqOCM",
            "Instance_of": "Event",
            "Instance_description": "An event within the Intpus interface that requests an OCM operation, with no parameters and no return value.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An occurrence within an interface that triggers a specific action or response.",
            "Instance": "reqMOM",
            "Instance_of": "Event",
            "Instance_description": "An event within the Intpus interface that requests a MOM operation, with no parameters and no return value.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An occurrence within an interface that triggers a specific action or response.",
            "Instance": "reqHCM",
            "Instance_of": "Event",
            "Instance_description": "An event within the Intpus interface that requests an HCM operation, with no parameters and no return value.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An occurrence within an interface that triggers a specific action or response.",
            "Instance": "reqVel",
            "Instance_of": "Event",
            "Instance_description": "An event within the Intpus interface that requests velocity, with no parameters but a return value of type real.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An occurrence within an interface that triggers a specific action or response.",
            "Instance": "reqHdng",
            "Instance_of": "Event",
            "Instance_description": "An event within the Intpus interface that requests heading, with no parameters but a return value of type real.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Outputs\", which defines the following Events: \"advVel\" (which takes one Parameters of type \"real\", and no Return Value) and \"advHdng\" (which takes one Parameters of type \"real\", and no Return Value).",
            "GID": "Interface3",
            "Concept": "Interface",
            "Concept_description": "A point of interaction where different components of the AUV system communicate with each other.",
            "Instance": "Outputs",
            "Instance_of": "Interface",
            "Instance_description": "An interface within the AUV_Module designed to handle output events and commands.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Outputs\", which defines the following Events: \"advVel\" (which takes one Parameters of type \"real\", and no Return Value) and \"advHdng\" (which takes one Parameters of type \"real\", and no Return Value).",
            "GID": "Interface3",
            "Concept": "Event",
            "Concept_description": "An occurrence within an interface that triggers a specific action or response.",
            "Instance": "advVel",
            "Instance_of": "Event",
            "Instance_description": "An event within the Outputs interface that advances velocity, taking one parameter of type real and no return value.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Outputs\", which defines the following Events: \"advVel\" (which takes one Parameters of type \"real\", and no Return Value) and \"advHdng\" (which takes one Parameters of type \"real\", and no Return Value).",
            "GID": "Interface3",
            "Concept": "Event",
            "Concept_description": "An occurrence within an interface that triggers a specific action or response.",
            "Instance": "advHdng",
            "Instance_of": "Event",
            "Instance_description": "An event within the Outputs interface that advances heading, taking one parameter of type real and no return value.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Actuators\", which should remain empty at this point.",
            "GID": "Interface4",
            "Concept": "Interface",
            "Concept_description": "A point of interaction where different components of the AUV system communicate with each other.",
            "Instance": "Actuators",
            "Instance_of": "Interface",
            "Instance_description": "An interface within the AUV_Module intended for controlling actuating mechanisms, currently without defined events or data.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Close\", to record the following values: \"horiz_cda\" (of type \"real\"), \"vert_cda\" (of type \"real\"), and \"id\" (of type \"nat\").",
            "GID": "CF3",
            "Concept": "CompositeType",
            "Concept_description": "A complex data type in the AUV_Module composed of multiple primitive types to represent structured data.",
            "Instance": "Close",
            "Instance_of": "CompositeType",
            "Instance_description": "A composite type within the AUV_Module representing a close proximity data structure, used to store horizontal and vertical close distance attributes.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Close\", to record the following values: \"horiz_cda\" (of type \"real\"), \"vert_cda\" (of type \"real\"), and \"id\" (of type \"nat\").",
            "GID": "CF3",
            "Concept": "Value",
            "Concept_description": "An element within a composite type representing a specific data point.",
            "Instance": "horiz_cda",
            "Instance_of": "Value",
            "Instance_description": "A value within the Close composite type representing the horizontal close distance attribute, of type real.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Close\", to record the following values: \"horiz_cda\" (of type \"real\"), \"vert_cda\" (of type \"real\"), and \"id\" (of type \"nat\").",
            "GID": "CF3",
            "Concept": "Value",
            "Concept_description": "An element within a composite type representing a specific data point.",
            "Instance": "vert_cda",
            "Instance_of": "Value",
            "Instance_description": "A value within the Close composite type representing the vertical close distance attribute, of type real.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Close\", to record the following values: \"horiz_cda\" (of type \"real\"), \"vert_cda\" (of type \"real\"), and \"id\" (of type \"nat\").",
            "GID": "CF3",
            "Concept": "Value",
            "Concept_description": "An element within a composite type representing a specific data point.",
            "Instance": "id",
            "Instance_of": "Value",
            "Instance_description": "A value within the Close composite type representing the identifier, of type nat.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"odist\", which takes an \"Obstacle\" as input, that returns the distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F1",
            "Concept": "Function",
            "Concept_description": "A block of code within the AUV_Module that performs a specific task or calculation.",
            "Instance": "odist",
            "Instance_of": "Function",
            "Instance_description": "A function within the AUV_Module designed to calculate the distance from the AUV to a given obstacle.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"odist\", which takes an \"Obstacle\" as input, that returns the distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F1",
            "Concept": "Obstacle",
            "Concept_description": null,
            "Instance": "Obstacle",
            "Instance_of": "Obstacle",
            "Instance_description": "An input parameter to the function odist, representing an obstacle.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"odist\", which takes an \"Obstacle\" as input, that returns the distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F1",
            "Concept": "real",
            "Concept_description": null,
            "Instance": "real",
            "Instance_of": "real",
            "Instance_description": "The return type of the function odist, representing the distance as a real number.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"hdist\", which takes an \"Obstacle\" as input, that returns the horizontal distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F2",
            "Concept": "Function",
            "Concept_description": "A block of code within the AUV_Module that performs a specific task or calculation.",
            "Instance": "hdist",
            "Instance_of": "Function",
            "Instance_description": "A function within the AUV_Module designed to calculate the horizontal distance from the AUV to a given obstacle.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"hdist\", which takes an \"Obstacle\" as input, that returns the horizontal distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F2",
            "Concept": null,
            "Concept_description": null,
            "Instance": "Obstacle",
            "Instance_of": "Obstacle",
            "Instance_description": "An input parameter to the function hdist, representing an obstacle.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"hdist\", which takes an \"Obstacle\" as input, that returns the horizontal distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F2",
            "Concept": null,
            "Concept_description": null,
            "Instance": "real",
            "Instance_of": "real",
            "Instance_description": "The return type of the function hdist, representing the horizontal distance as a real number.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"vdist\", which takes an \"Obstacle\" as input, that returns the vertical distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F3",
            "Concept": "Function",
            "Concept_description": "A block of code within the AUV_Module that performs a specific task or calculation.",
            "Instance": "vdist",
            "Instance_of": "Function",
            "Instance_description": "A function within the AUV_Module designed to calculate the vertical distance from the AUV to a given obstacle.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"vdist\", which takes an \"Obstacle\" as input, that returns the vertical distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F3",
            "Concept": null,
            "Concept_description": null,
            "Instance": "Obstacle",
            "Instance_of": "Obstacle",
            "Instance_description": "An input parameter to the function vdist, representing an obstacle.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"vdist\", which takes an \"Obstacle\" as input, that returns the vertical distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F3",
            "Concept": null,
            "Concept_description": null,
            "Instance": "real",
            "Instance_of": "real",
            "Instance_description": "The return type of the function vdist, representing the vertical distance as a real number.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        }
    ]
}