var auv_module = new M!Module;
auv_module.name = "AUV_Module";

var auv_platform = new M!RoboticPlatform;
auv_platform.name = "AUV_Platform";

var sensors = new M!Interface;
sensors.name = "Sensors";

var actuators = new M!Interface;
actuators.name = "Actuators";

auv_platform.interfaces.add(sensors);
auv_platform.interfaces.add(actuators);

auv_module.robotic_platforms.add(auv_platform);
auv_module.interfaces.add(sensors);
auv_module.interfaces.add(actuators);

var auv_operator = new M!Controller;
auv_operator.name = "AUV_Operator";

var inputs = new M!Interface;
inputs.name = "Inputs";

auv_operator.interfaces.add(inputs);

auv_module.controllers.add(auv_operator);
auv_module.interfaces.add(inputs);

var lre_ctrl = new M!Controller;
lre_ctrl.name = "LRE_Ctrl";

var outputs = new M!Interface;
outputs.name = "Outputs";

lre_ctrl.interfaces.add(inputs);
lre_ctrl.interfaces.add(outputs);

auv_module.controllers.add(lre_ctrl);
auv_module.interfaces.add(outputs);

var auv_autopilot = new M!Controller;
auv_autopilot.name = "AUV_Autopilot";

auv_autopilot.interfaces.add(outputs);

auv_module.controllers.add(auv_autopilot);

var nat = new M!PrimitiveType;
nat.name = "nat";

auv_module.primitiveTypes.add(nat);

var intType = new M!PrimitiveType;
intType.name = "int";

auv_module.primitiveTypes.add(intType);

var stringType = new M!PrimitiveType;
stringType.name = "string";

auv_module.primitiveTypes.add(stringType);

var booleanType = new M!PrimitiveType;
booleanType.name = "boolean";

auv_module.primitiveTypes.add(booleanType);

var realType = new M!PrimitiveType;
realType.name = "real";

auv_module.primitiveTypes.add(realType);

var svec = new M!CompositeType;
svec.name = "SVec";

var radial = new M!Value;
radial.name = "radial";
radial.type = realType;

var polar = new M!Value;
polar.name = "polar";
polar.type = realType;

var azimuth = new M!Value;
azimuth.name = "azimuth";
azimuth.type = realType;

svec.values.add(radial);
svec.values.add(polar);
svec.values.add(azimuth);

auv_module.compositeTypes.add(svec);

var obstacle = new M!CompositeType;
obstacle.name = "Obstacle";

var ns_rel_dist = new M!Value;
ns_rel_dist.name = "ns_rel_dist";
ns_rel_dist.type = realType;

var ew_rel_dist = new M!Value;
ew_rel_dist.name = "ew_rel_dist";
ew_rel_dist.type = realType;

var depth = new M!Value;
depth.name = "depth";
depth.type = realType;

var idValue = new M!Value;
idValue.name = "id";
idValue.type = realType;

var obs_hdng = new M!Value;
obs_hdng.name = "obs_hdng";
obs_hdng.type = svec;

obstacle.values.add(ns_rel_dist);
obstacle.values.add(ew_rel_dist);
obstacle.values.add(depth);
obstacle.values.add(idValue);
obstacle.values.add(obs_hdng);

auv_module.compositeTypes.add(obstacle);

sensors.values.clear();

var depthSensorValue = new M!Value;
depthSensorValue.name = "depth";
depthSensorValue.type = realType;

var hdngValue = new M!Value;
hdngValue.name = "hdng";
hdngValue.type = svec;

var obsValue = new M!Value;
obsValue.name = "obs";
obsValue.type = obstacle;

sensors.values.add(depthSensorValue);
sensors.values.add(hdngValue);
sensors.values.add(obsValue);

inputs.events.clear();

var endTask = new M!Event;
endTask.name = "endTask";

var reqOCM = new M!Event;
reqOCM.name = "reqOCM";

var reqMOM = new M!Event;
reqMOM.name = "reqMOM";

var reqHCM = new M!Event;
reqHCM.name = "reqHCM";

var reqVel = new M!Event;
reqVel.name = "reqVel";
reqVel.returnType = realType;

var reqHdng = new M!Event;
reqHdng.name = "reqHdng";
reqHdng.returnType = realType;

inputs.events.add(endTask);
inputs.events.add(reqOCM);
inputs.events.add(reqMOM);
inputs.events.add(reqHCM);
inputs.events.add(reqVel);
inputs.events.add(reqHdng);

outputs.events.clear();

var advVel = new M!Event;
advVel.name = "advVel";

var velParam = new M!Parameter;
velParam.name = "velocity";
velParam.type = realType;

advVel.parameters.add(velParam);

var advHdng = new M!Event;
advHdng.name = "advHdng";

var hdngParam = new M!Parameter;
hdngParam.name = "heading";
hdngParam.type = realType;

advHdng.parameters.add(hdngParam);

outputs.events.add(advVel);
outputs.events.add(advHdng);

actuators.events.clear();
actuators.values.clear();

var closeType = new M!CompositeType;
closeType.name = "Close";

var horiz_cda = new M!Value;
horiz_cda.name = "horiz_cda";
horiz_cda.type = realType;

var vert_cda = new M!Value;
vert_cda.name = "vert_cda";
vert_cda.type = realType;

var closeId = new M!Value;
closeId.name = "id";
closeId.type = nat;

closeType.values.add(horiz_cda);
closeType.values.add(vert_cda);
closeType.values.add(closeId);

auv_module.compositeTypes.add(closeType);

var odistFunction = new M!Function;
odistFunction.name = "odist";
odistFunction.returnType = realType;

var obstacleParam = new M!Parameter;
obstacleParam.name = "obstacle";
obstacleParam.type = obstacle;

odistFunction.parameters.add(obstacleParam);

auv_module.functions.add(odistFunction);

var hdistFunction = new M!Function;
hdistFunction.name = "hdist";
hdistFunction.returnType = realType;

var hdistObstacleParam = new M!Parameter;
hdistObstacleParam.name = "obstacle";
hdistObstacleParam.type = obstacle;

hdistFunction.parameters.add(hdistObstacleParam);

auv_module.functions.add(hdistFunction);

var vdistFunction = new M!Function;
vdistFunction.name = "vdist";
vdistFunction.returnType = realType;

var vdistObstacleParam = new M!Parameter;
vdistObstacleParam.name = "obstacle";
vdistObstacleParam.type = obstacle;

vdistFunction.parameters.add(vdistObstacleParam);

auv_module.functions.add(vdistFunction);