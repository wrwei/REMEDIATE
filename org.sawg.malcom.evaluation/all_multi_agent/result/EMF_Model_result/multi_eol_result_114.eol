var auv_module = new M!Module;
auv_module.name = "AUV_Module";

var auv_platform = new M!RoboticPlatform;
auv_platform.name = "AUV_Platform";
auv_module.robotic_platforms.add(auv_platform);

var sensors = new M!Interface;
sensors.name = "Sensors";
auv_module.interfaces.add(sensors);

var actuators = new M!Interface;
actuators.name = "Actuators";
auv_module.interfaces.add(actuators);

var auv_operator = new M!Controller;
auv_operator.name = "AUV_Operator";
auv_module.controllers.add(auv_operator);

var inputs = new M!Interface;
inputs.name = "Inputs";
auv_module.interfaces.add(inputs);

var lre_ctrl = new M!Controller;
lre_ctrl.name = "LRE_Ctrl";
auv_module.controllers.add(lre_ctrl);

var outputs = new M!Interface;
outputs.name = "Outputs";
auv_module.interfaces.add(outputs);

var auv_autopilot = new M!Controller;
auv_autopilot.name = "AUV_Autopilot";
auv_module.controllers.add(auv_autopilot);

var nat = new M!PrimitiveType;
nat.name = "nat";
auv_module.primitiveTypes.add(nat);

var int = new M!PrimitiveType;
int.name = "int";
auv_module.primitiveTypes.add(int);

var string = new M!PrimitiveType;
string.name = "string";
auv_module.primitiveTypes.add(string);

var boolean = new M!PrimitiveType;
boolean.name = "boolean";
auv_module.primitiveTypes.add(boolean);

var real = new M!PrimitiveType;
real.name = "real";
auv_module.primitiveTypes.add(real);

var svec = new M!CompositeType;
svec.name = "SVec";
auv_module.compositeTypes.add(svec);

var radial = new M!Value;
radial.name = "radial";
radial.type = real;
svec.values.add(radial);

var polar = new M!Value;
polar.name = "polar";
polar.type = real;
svec.values.add(polar);

var azimuth = new M!Value;
azimuth.name = "azimuth";
azimuth.type = real;
svec.values.add(azimuth);

var obstacle = new M!CompositeType;
obstacle.name = "Obstacle";
auv_module.compositeTypes.add(obstacle);

var ns_rel_dist = new M!Value;
ns_rel_dist.name = "ns_rel_dist";
ns_rel_dist.type = real;
obstacle.values.add(ns_rel_dist);

var ew_rel_dist = new M!Value;
ew_rel_dist.name = "ew_rel_dist";
ew_rel_dist.type = real;
obstacle.values.add(ew_rel_dist);

var depth = new M!Value;
depth.name = "depth";
depth.type = real;
obstacle.values.add(depth);

var id_value = new M!Value;
id_value.name = "id";
id_value.type = real;
obstacle.values.add(id_value);

var obs_hdng = new M!Value;
obs_hdng.name = "obs_hdng";
obs_hdng.type = svec;
obstacle.values.add(obs_hdng);

var depth_sensor = new M!Value;
depth_sensor.name = "depth";
depth_sensor.type = real;
sensors.values.add(depth_sensor);

var hdng = new M!Value;
hdng.name = "hdng";
hdng.type = svec;
sensors.values.add(hdng);

var obs = new M!Value;
obs.name = "obs";
obs.type = obstacle;
sensors.values.add(obs);

var endTask = new M!Event;
endTask.name = "endTask";
inputs.events.add(endTask);

var reqOCM = new M!Event;
reqOCM.name = "reqOCM";
inputs.events.add(reqOCM);

var reqMOM = new M!Event;
reqMOM.name = "reqMOM";
inputs.events.add(reqMOM);

var reqHCM = new M!Event;
reqHCM.name = "reqHCM";
inputs.events.add(reqHCM);

var reqVel = new M!Event;
reqVel.name = "reqVel";
reqVel.returnType = real;
inputs.events.add(reqVel);

var reqHdng = new M!Event;
reqHdng.name = "reqHdng";
reqHdng.returnType = real;
inputs.events.add(reqHdng);

var advVel = new M!Event;
advVel.name = "advVel";
outputs.events.add(advVel);

var velParam = new M!Parameter;
velParam.name = "velocity";
velParam.type = real;
advVel.parameters.add(velParam);

var advHdng = new M!Event;
advHdng.name = "advHdng";
outputs.events.add(advHdng);

var hdngParam = new M!Parameter;
hdngParam.name = "heading";
hdngParam.type = real;
advHdng.parameters.add(hdngParam);

var close = new M!CompositeType;
close.name = "Close";
auv_module.compositeTypes.add(close);

var horiz_cda = new M!Value;
horiz_cda.name = "horiz_cda";
horiz_cda.type = real;
close.values.add(horiz_cda);

var vert_cda = new M!Value;
vert_cda.name = "vert_cda";
vert_cda.type = real;
close.values.add(vert_cda);

var id_close = new M!Value;
id_close.name = "id";
id_close.type = nat;
close.values.add(id_close);

var odist = new M!Function;
odist.name = "odist";
odist.returnType = real;
auv_module.functions.add(odist);

var obstacleParam = new M!Parameter;
obstacleParam.name = "obstacle";
obstacleParam.type = obstacle;
odist.parameters.add(obstacleParam);

var hdist = new M!Function;
hdist.name = "hdist";
hdist.returnType = real;
auv_module.functions.add(hdist);

var obstacleParamHdist = new M!Parameter;
obstacleParamHdist.name = "obstacle";
obstacleParamHdist.type = obstacle;
hdist.parameters.add(obstacleParamHdist);

var vdist = new M!Function;
vdist.name = "vdist";
vdist.returnType = real;
auv_module.functions.add(vdist);

var obstacleParamVdist = new M!Parameter;
obstacleParamVdist.name = "obstacle";
obstacleParamVdist.type = obstacle;
vdist.parameters.add(obstacleParamVdist);