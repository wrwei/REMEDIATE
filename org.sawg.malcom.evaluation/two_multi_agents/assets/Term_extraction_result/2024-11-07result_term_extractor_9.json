{
    "term_trace": [
        {
            "message": "Great! Please provide the requirement statements, and I'll assist in checking the extracted concepts and instances."
        },
        {
            "Requirement": "The AUV system is developed as a Module named \"AUV_Module\".",
            "GID": "SD1",
            "Concept": "Module",
            "Concept_description": "A Module is a distinct and separable component of the AUV system.",
            "Instance": "AUV_Module",
            "Instance_of": "Module",
            "Instance_description": "AUV_Module is the name of the module developed for the AUV system.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Robotic Platform named \"AUV_Platform\", it should use the Interfaces \"Sensors\" and \"Actuators\" (defined by \"AUV_Module\").",
            "GID": "SD2",
            "Concept": "RoboticPlatform",
            "Concept_description": "A Robotic Platform is a base structure within the AUV system that supports robotic components.",
            "Instance": "AUV_Platform",
            "Instance_of": "RoboticPlatform",
            "Instance_description": "AUV_Platform is the name of the robotic platform within the AUV_Module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Robotic Platform named \"AUV_Platform\", it should use the Interfaces \"Sensors\" and \"Actuators\" (defined by \"AUV_Module\").",
            "GID": "SD2",
            "Concept": "Interface",
            "Concept_description": "An Interface is a shared boundary across which components of the AUV system exchange information.",
            "Instance": "Sensors",
            "Instance_of": "Interface",
            "Instance_description": "Sensors are interfaces used by the AUV_Platform to gather data from the environment.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Robotic Platform named \"AUV_Platform\", it should use the Interfaces \"Sensors\" and \"Actuators\" (defined by \"AUV_Module\").",
            "GID": "SD2",
            "Concept": "Interface",
            "Concept_description": "An Interface is a shared boundary across which components of the AUV system exchange information.",
            "Instance": "Actuators",
            "Instance_of": "Interface",
            "Instance_description": "Actuators are interfaces used by the AUV_Platform to perform actions in the environment.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Operator\", it should use the Interface \"Inputs\" (defined by \"AUV_Module\").",
            "GID": "SD3",
            "Concept": "Controller",
            "Concept_description": "A Controller is a component within the AUV system that manages and directs the operations of the AUV.",
            "Instance": "AUV_Operator",
            "Instance_of": "Controller",
            "Instance_description": "AUV_Operator is the name of the controller within the AUV_Module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Operator\", it should use the Interface \"Inputs\" (defined by \"AUV_Module\").",
            "GID": "SD3",
            "Concept": "Interface",
            "Concept_description": "An Interface is a shared boundary across which components of the AUV system exchange information.",
            "Instance": "Inputs",
            "Instance_of": "Interface",
            "Instance_description": "Inputs are interfaces used by the AUV_Operator to receive data necessary for operation.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"LRE_Ctrl\" (for Last Response Engine), it should use the Interfaces \"Inputs\" and \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD4",
            "Concept": "Controller",
            "Concept_description": "A Controller is a component within the AUV system that manages and directs the operations of the AUV.",
            "Instance": "LRE_Ctrl",
            "Instance_of": "Controller",
            "Instance_description": "LRE_Ctrl is the name of the controller within the AUV_Module, designated for the Last Response Engine.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"LRE_Ctrl\" (for Last Response Engine), it should use the Interfaces \"Inputs\" and \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD4",
            "Concept": "Interface",
            "Concept_description": "An Interface is a shared boundary across which components of the AUV system exchange information.",
            "Instance": "Inputs",
            "Instance_of": "Interface",
            "Instance_description": "Inputs are interfaces used by the LRE_Ctrl to receive data necessary for operation.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"LRE_Ctrl\" (for Last Response Engine), it should use the Interfaces \"Inputs\" and \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD4",
            "Concept": "Interface",
            "Concept_description": "An Interface is a shared boundary across which components of the AUV system exchange information.",
            "Instance": "Outputs",
            "Instance_of": "Interface",
            "Instance_description": "Outputs are interfaces used by the LRE_Ctrl to send data necessary for operation.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Autopilot\", it should use the Interface \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD5",
            "Concept": "Controller",
            "Concept_description": "A Controller is a component within the AUV system that manages and directs the operations of the AUV.",
            "Instance": "AUV_Autopilot",
            "Instance_of": "Controller",
            "Instance_description": "AUV_Autopilot is the name of the controller within the AUV_Module, designed to handle autopilot functions.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Autopilot\", it should use the Interface \"Outputs\" (defined by \"AUV_Module\").",
            "GID": "SD5",
            "Concept": "Interface",
            "Concept_description": "An Interface is a shared boundary across which components of the AUV system exchange information.",
            "Instance": "Outputs",
            "Instance_of": "Interface",
            "Instance_description": "Outputs are interfaces used by the AUV_Autopilot to send data necessary for operation.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"nat\" (for natural numbers).",
            "GID": "PT1",
            "Concept": "PrimitiveType",
            "Concept_description": "A Primitive Type is a basic data type provided by a programming language as a building block.",
            "Instance": "nat",
            "Instance_of": "PrimitiveType",
            "Instance_description": "nat is a primitive type defined in the AUV_Module representing natural numbers.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"int\" (for integers).",
            "GID": "PT2",
            "Concept": "PrimitiveType",
            "Concept_description": "A Primitive Type is a basic data type provided by a programming language as a building block.",
            "Instance": "int",
            "Instance_of": "PrimitiveType",
            "Instance_description": "int is a primitive type defined in the AUV_Module representing integers.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"string\" (for string values).",
            "GID": "PT3",
            "Concept": "PrimitiveType",
            "Concept_description": "A Primitive Type is a basic data type provided by a programming language as a building block.",
            "Instance": "string",
            "Instance_of": "PrimitiveType",
            "Instance_description": "string is a primitive type defined in the AUV_Module representing string values.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"boolean\" (for boolean values).",
            "GID": "PT4",
            "Concept": "PrimitiveType",
            "Concept_description": "A Primitive Type is a basic data type provided by a programming language as a building block.",
            "Instance": "boolean",
            "Instance_of": "PrimitiveType",
            "Instance_description": "boolean is a primitive type defined in the AUV_Module representing boolean values.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"real\" (for real numbers).",
            "GID": "PT5",
            "Concept": "PrimitiveType",
            "Concept_description": "A Primitive Type is a basic data type provided by a programming language as a building block.",
            "Instance": "real",
            "Instance_of": "PrimitiveType",
            "Instance_description": "real is a primitive type defined in the AUV_Module representing real numbers.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"SVec\" (Spherical Vector), to record values such as \"radial\" (of type \"real\"), \"polar\" (of type \"real\"), and \"azimuth\" (of type \"real\").",
            "GID": "CT1",
            "Concept": "CompositeType",
            "Concept_description": "A Composite Type is a data structure composed of multiple primitive types.",
            "Instance": "SVec",
            "Instance_of": "CompositeType",
            "Instance_description": "SVec is a composite type defined in the AUV_Module representing a spherical vector.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"SVec\" (Spherical Vector), to record values such as \"radial\" (of type \"real\"), \"polar\" (of type \"real\"), and \"azimuth\" (of type \"real\").",
            "GID": "CT1",
            "Concept": null,
            "Concept_description": null,
            "Instance": "radial",
            "Instance_of": null,
            "Instance_description": "radial is a value of type real used within the SVec composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"SVec\" (Spherical Vector), to record values such as \"radial\" (of type \"real\"), \"polar\" (of type \"real\"), and \"azimuth\" (of type \"real\").",
            "GID": "CT1",
            "Concept": null,
            "Concept_description": null,
            "Instance": "polar",
            "Instance_of": null,
            "Instance_description": "polar is a value of type real used within the SVec composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"SVec\" (Spherical Vector), to record values such as \"radial\" (of type \"real\"), \"polar\" (of type \"real\"), and \"azimuth\" (of type \"real\").",
            "GID": "CT1",
            "Concept": null,
            "Concept_description": null,
            "Instance": "azimuth",
            "Instance_of": null,
            "Instance_description": "azimuth is a value of type real used within the SVec composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "CompositeType",
            "Concept_description": "A Composite Type is a data structure composed of multiple primitive types.",
            "Instance": "Obstacle",
            "Instance_of": "CompositeType",
            "Instance_description": "Obstacle is a composite type defined in the AUV_Module used to represent an obstacle with various attributes.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": null,
            "Concept_description": null,
            "Instance": "ns_rel_dist",
            "Instance_of": null,
            "Instance_description": "ns_rel_dist is a value of type real used within the Obstacle composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": null,
            "Concept_description": null,
            "Instance": "ew_rel_dist",
            "Instance_of": null,
            "Instance_description": "ew_rel_dist is a value of type real used within the Obstacle composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": null,
            "Concept_description": null,
            "Instance": "depth",
            "Instance_of": null,
            "Instance_description": "depth is a value of type real used within the Obstacle composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": null,
            "Concept_description": null,
            "Instance": "id",
            "Instance_of": null,
            "Instance_description": "id is a value of type real used within the Obstacle composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": null,
            "Concept_description": null,
            "Instance": "obs_hdng",
            "Instance_of": null,
            "Instance_description": "obs_hdng is a value of type SVec used within the Obstacle composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Sensors\", which contains the following Values: \"depth\" (of type \"real\"), \"hdng\" (of type \"SVec\") and \"obs\" (of type \"Obstacle\").",
            "GID": "Interface1",
            "Concept": "Interface",
            "Concept_description": "An Interface is a shared boundary across which components of the AUV system exchange information.",
            "Instance": "Sensors",
            "Instance_of": "Interface",
            "Instance_description": "Sensors is an interface defined in the AUV_Module that includes various sensor data.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Sensors\", which contains the following Values: \"depth\" (of type \"real\"), \"hdng\" (of type \"SVec\") and \"obs\" (of type \"Obstacle\").",
            "GID": "Interface1",
            "Concept": null,
            "Concept_description": null,
            "Instance": "depth",
            "Instance_of": null,
            "Instance_description": "depth is a value of type real used within the Sensors interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Sensors\", which contains the following Values: \"depth\" (of type \"real\"), \"hdng\" (of type \"SVec\") and \"obs\" (of type \"Obstacle\").",
            "GID": "Interface1",
            "Concept": null,
            "Concept_description": null,
            "Instance": "hdng",
            "Instance_of": null,
            "Instance_description": "hdng is a value of type SVec used within the Sensors interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Sensors\", which contains the following Values: \"depth\" (of type \"real\"), \"hdng\" (of type \"SVec\") and \"obs\" (of type \"Obstacle\").",
            "GID": "Interface1",
            "Concept": null,
            "Concept_description": null,
            "Instance": "obs",
            "Instance_of": null,
            "Instance_description": "obs is a value of type Obstacle used within the Sensors interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Interface",
            "Concept_description": "An Interface is a shared boundary across which components of the AUV system exchange information.",
            "Instance": "Intpus",
            "Instance_of": "Interface",
            "Instance_description": "Intpus is an interface defined in the AUV_Module that includes various events.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An Event is an occurrence or action that can be detected by the system.",
            "Instance": "endTask",
            "Instance_of": "Event",
            "Instance_description": "endTask is an event with no parameters and no return value within the Intpus interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An Event is an occurrence or action that can be detected by the system.",
            "Instance": "reqOCM",
            "Instance_of": "Event",
            "Instance_description": "reqOCM is an event with no parameters and no return value within the Intpus interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An Event is an occurrence or action that can be detected by the system.",
            "Instance": "reqMOM",
            "Instance_of": "Event",
            "Instance_description": "reqMOM is an event with no parameters and no return value within the Intpus interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An Event is an occurrence or action that can be detected by the system.",
            "Instance": "reqHCM",
            "Instance_of": "Event",
            "Instance_description": "reqHCM is an event with no parameters and no return value within the Intpus interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An Event is an occurrence or action that can be detected by the system.",
            "Instance": "reqVel",
            "Instance_of": "Event",
            "Instance_description": "reqVel is an event with no parameters but with a return value of type real within the Intpus interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An Event is an occurrence or action that can be detected by the system.",
            "Instance": "reqHdng",
            "Instance_of": "Event",
            "Instance_description": "reqHdng is an event with no parameters but with a return value of type real within the Intpus interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Outputs\", which defines the following Events: \"advVel\" (which takes one Parameters of type \"real\", and no Return Value) and \"advHdng\" (which takes one Parameters of type \"real\", and no Return Value).",
            "GID": "Interface3",
            "Concept": "Interface",
            "Concept_description": "An Interface is a shared boundary across which components of the AUV system exchange information.",
            "Instance": "Outputs",
            "Instance_of": "Interface",
            "Instance_description": "Outputs is an interface defined in the AUV_Module that includes various events.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Outputs\", which defines the following Events: \"advVel\" (which takes one Parameters of type \"real\", and no Return Value) and \"advHdng\" (which takes one Parameters of type \"real\", and no Return Value).",
            "GID": "Interface3",
            "Concept": "Event",
            "Concept_description": "An Event is an occurrence or action that can be detected by the system.",
            "Instance": "advVel",
            "Instance_of": "Event",
            "Instance_description": "advVel is an event that takes one parameter of type real and has no return value within the Outputs interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Outputs\", which defines the following Events: \"advVel\" (which takes one Parameters of type \"real\", and no Return Value) and \"advHdng\" (which takes one Parameters of type \"real\", and no Return Value).",
            "GID": "Interface3",
            "Concept": "Event",
            "Concept_description": "An Event is an occurrence or action that can be detected by the system.",
            "Instance": "advHdng",
            "Instance_of": "Event",
            "Instance_description": "advHdng is an event that takes one parameter of type real and has no return value within the Outputs interface.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define an Interface named \"Actuators\", which should remain empty at this point.",
            "GID": "Interface4",
            "Concept": "Interface",
            "Concept_description": "An Interface is a shared boundary across which components of the AUV system exchange information.",
            "Instance": "Actuators",
            "Instance_of": "Interface",
            "Instance_description": "Actuators is an interface defined in the AUV_Module that is currently empty.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Close\", to record the following values: \"horiz_cda\" (of type \"real\"), \"vert_cda\" (of type \"real\"), and \"id\" (of type \"nat\").",
            "GID": "CF3",
            "Concept": "CompositeType",
            "Concept_description": "A Composite Type is a data structure composed of multiple primitive types.",
            "Instance": "Close",
            "Instance_of": "CompositeType",
            "Instance_description": "Close is a composite type defined in the AUV_Module used to represent a close structure with various attributes.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Close\", to record the following values: \"horiz_cda\" (of type \"real\"), \"vert_cda\" (of type \"real\"), and \"id\" (of type \"nat\").",
            "GID": "CF3",
            "Concept": null,
            "Concept_description": null,
            "Instance": "horiz_cda",
            "Instance_of": null,
            "Instance_description": "horiz_cda is a value of type real used within the Close composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Close\", to record the following values: \"horiz_cda\" (of type \"real\"), \"vert_cda\" (of type \"real\"), and \"id\" (of type \"nat\").",
            "GID": "CF3",
            "Concept": null,
            "Concept_description": null,
            "Instance": "vert_cda",
            "Instance_of": null,
            "Instance_description": "vert_cda is a value of type real used within the Close composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Close\", to record the following values: \"horiz_cda\" (of type \"real\"), \"vert_cda\" (of type \"real\"), and \"id\" (of type \"nat\").",
            "GID": "CF3",
            "Concept": null,
            "Concept_description": null,
            "Instance": "id",
            "Instance_of": null,
            "Instance_description": "id is a value of type nat used within the Close composite type.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"odist\", which takes an \"Obstacle\" as input, that returns the distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F1",
            "Concept": "Function",
            "Concept_description": "A Function is a block of code that performs a specific task.",
            "Instance": "odist",
            "Instance_of": "Function",
            "Instance_description": "odist is a function defined in the AUV_Module that calculates the distance from the AUV to an obstacle.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"odist\", which takes an \"Obstacle\" as input, that returns the distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F1",
            "Concept": "Obstacle",
            "Concept_description": "Obstacle is a composite type used within the AUV system to represent an obstacle with various attributes.",
            "Instance": "Obstacle",
            "Instance_of": "Obstacle",
            "Instance_description": "Obstacle is an input to the odist function representing an obstacle whose distance from the AUV is to be calculated.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"odist\", which takes an \"Obstacle\" as input, that returns the distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F1",
            "Concept": "PrimitiveType",
            "Concept_description": "A Primitive Type is a basic data type provided by a programming language as a building block.",
            "Instance": "real",
            "Instance_of": "PrimitiveType",
            "Instance_description": "real is a primitive type representing real numbers, used as the return type for the odist function.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"hdist\", which takes an \"Obstacle\" as input, that returns the horizontal distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F2",
            "Concept": "Function",
            "Concept_description": "A Function is a block of code that performs a specific task.",
            "Instance": "hdist",
            "Instance_of": "Function",
            "Instance_description": "hdist is a function defined in the AUV_Module that calculates the horizontal distance from the AUV to an obstacle.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"hdist\", which takes an \"Obstacle\" as input, that returns the horizontal distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F2",
            "Concept": "Obstacle",
            "Concept_description": "Obstacle is a composite type used within the AUV system to represent an obstacle with various attributes.",
            "Instance": "Obstacle",
            "Instance_of": "Obstacle",
            "Instance_description": "Obstacle is an input to the hdist function representing an obstacle whose horizontal distance from the AUV is to be calculated.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"hdist\", which takes an \"Obstacle\" as input, that returns the horizontal distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F2",
            "Concept": "PrimitiveType",
            "Concept_description": "A Primitive Type is a basic data type provided by a programming language as a building block.",
            "Instance": "real",
            "Instance_of": "PrimitiveType",
            "Instance_description": "real is a primitive type representing real numbers, used as the return type for the hdist function.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"vdist\", which takes an \"Obstacle\" as input, that returns the vertical distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F3",
            "Concept": "Function",
            "Concept_description": "A Function is a block of code that performs a specific task.",
            "Instance": "vdist",
            "Instance_of": "Function",
            "Instance_description": "vdist is a function defined in the AUV_Module that calculates the vertical distance from the AUV to an obstacle.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"vdist\", which takes an \"Obstacle\" as input, that returns the vertical distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F3",
            "Concept": "Obstacle",
            "Concept_description": "Obstacle is a composite type used within the AUV system to represent an obstacle with various attributes.",
            "Instance": "Obstacle",
            "Instance_of": "Obstacle",
            "Instance_description": "Obstacle is an input to the vdist function representing an obstacle whose vertical distance from the AUV is to be calculated.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Module\" shall define a Function named \"vdist\", which takes an \"Obstacle\" as input, that returns the vertical distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F3",
            "Concept": "PrimitiveType",
            "Concept_description": "A Primitive Type is a basic data type provided by a programming language as a building block.",
            "Instance": "real",
            "Instance_of": "PrimitiveType",
            "Instance_description": "real is a primitive type representing real numbers, used as the return type for the vdist function.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        }
    ]
}