[
    {
        "Requirement": "The AUV system is developed as a Module named \"AUV_Module\".",
        "GID": "SD1",
        "Concept": "Module",
        "Concept_description": "A self-contained unit within the AUV system.",
        "Instance": "AUV_Module",
        "Instance_of": "Module",
        "Instance_description": "The specific module developed for the AUV system.",
        "Requirement_type": "Non-Functional",
        "Non-Requirement_type": "architecture"
    },
    {
        "Requirement": "\"AUV_Module\" should contain a Robotic Platform named \"AUV_Platform\", it should use the Interfaces \"Sensors\" and \"Actuators\" (defined by \"AUV_Module\").",
        "GID": "SD2",
        "Concept": "Robotic Platform",
        "Concept_description": "A base structure within the AUV system that supports robotic functions.",
        "Instance": "AUV_Platform",
        "Instance_of": "Robotic Platform",
        "Instance_description": "The specific robotic platform within the AUV module.",
        "Requirement_type": "Non-Functional",
        "Non-Requirement_type": "architecture"
    },
    {
        "Requirement": "\"AUV_Module\" should contain a Robotic Platform named \"AUV_Platform\", it should use the Interfaces \"Sensors\" and \"Actuators\" (defined by \"AUV_Module\").",
        "GID": "SD2",
        "Concept": "Interface",
        "Concept_description": "A point of interaction between components within the AUV system.",
        "Instance": "Sensors",
        "Instance_of": "Interface",
        "Instance_description": "An interface used by the AUV platform for sensing.",
        "Requirement_type": "Non-Functional",
        "Non-Requirement_type": "architecture"
    },
    {
        "Requirement": "\"AUV_Module\" should contain a Robotic Platform named \"AUV_Platform\", it should use the Interfaces \"Sensors\" and \"Actuators\" (defined by \"AUV_Module\").",
        "GID": "SD2",
        "Concept": "Interface",
        "Concept_description": "A point of interaction between components within the AUV system.",
        "Instance": "Actuators",
        "Instance_of": "Interface",
        "Instance_description": "An interface used by the AUV platform for actuation.",
        "Requirement_type": "Non-Functional",
        "Non-Requirement_type": "architecture"
    },
    {
        "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Operator\", it should use the Interface \"Inputs\" (defined by \"AUV_Module\").",
        "GID": "SD3",
        "Concept": "Controller",
        "Concept_description": "A component that manages or directs the operation of the AUV system.",
        "Instance": "AUV_Operator",
        "Instance_of": "Controller",
        "Instance_description": "The specific controller within the AUV module responsible for operation.",
        "Requirement_type": "Non-Functional",
        "Non-Requirement_type": "architecture"
    },
    {
        "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Operator\", it should use the Interface \"Inputs\" (defined by \"AUV_Module\").",
        "GID": "SD3",
        "Concept": "Interface",
        "Concept_description": "A point of interaction between components within the AUV system.",
        "Instance": "Inputs",
        "Instance_of": "Interface",
        "Instance_description": "An interface used by the AUV operator for input.",
        "Requirement_type": "Non-Functional",
        "Non-Requirement_type": "architecture"
    },
    {
        "Requirement": "\"AUV_Module\" should contain a Controller named \"LRE_Ctrl\" (for Last Response Engine), it should use the Interfaces \"Inputs\" and \"Outputs\" (defined by \"AUV_Module\").",
        "GID": "SD4",
        "Concept": "Controller",
        "Concept_description": "A component that manages or directs the operation of the AUV system.",
        "Instance": "LRE_Ctrl",
        "Instance_of": "Controller",
        "Instance_description": "The specific controller within the AUV module for the Last Response Engine.",
        "Requirement_type": "Non-Functional",
        "Non-Requirement_type": "architecture"
    },
    {
        "Requirement": "\"AUV_Module\" should contain a Controller named \"LRE_Ctrl\" (for Last Response Engine), it should use the Interfaces \"Inputs\" and \"Outputs\" (defined by \"AUV_Module\").",
        "GID": "SD4",
        "Concept": "Interface",
        "Concept_description": "A point of interaction between components within the AUV system.",
        "Instance": "Outputs",
        "Instance_of": "Interface",
        "Instance_description": "An interface used by the LRE controller for output.",
        "Requirement_type": "Non-Functional",
        "Non-Requirement_type": "architecture"
    },
    {
        "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Autopilot\", it should use the Interface \"Outputs\" (defined by \"AUV_Module\").",
        "GID": "SD5",
        "Concept": "Controller",
        "Concept_description": "A component that manages or directs the operation of the AUV system.",
        "Instance": "AUV_Autopilot",
        "Instance_of": "Controller",
        "Instance_description": "The specific controller within the AUV module for autopilot functions.",
        "Requirement_type": "Non-Functional",
        "Non-Requirement_type": "architecture"
    },
    {
        "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"nat\" (for natural numbers).",
        "GID": "PT1",
        "Concept": "Primitive Type",
        "Concept_description": "A basic data type defined within the AUV module.",
        "Instance": "nat",
        "Instance_of": "Primitive Type",
        "Instance_description": "A primitive type for natural numbers.",
        "Requirement_type": "Non-Functional",
        "Non-Requirement_type": "architecture"
    },
    {
        "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"int\" (for integers).",
        "GID": "PT2",
        "Concept": "Primitive Type",
        "Concept_description": "A basic data type defined within the AUV module.",
        "Instance": "int",
        "Instance_of": "Primitive Type",
        "Instance_description": "A primitive type for integers.",
        "Requirement_type": "Non-Functional",
        "Non-Requirement_type": "architecture"
    },
    {
        "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"string\" (for string values).",
        "GID": "PT3",
        "Concept": "Primitive Type",
        "Concept_description": "A basic data type defined within the AUV module.",
        "Instance": "string",
        "Instance_of": "Primitive Type",
        "Instance_description": "A primitive type for string values.",
        "Requirement_type": "Non-Functional",
        "Non-Requirement_type": "architecture"
    },
    {
        "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"boolean\" (for boolean values).",
        "GID": "PT4",
        "Concept": "Primitive Type",
        "Concept_description": "A basic data type defined within the AUV module.",
        "Instance": "boolean",
        "Instance_of": "Primitive Type",
        "Instance_description": "A primitive type for boolean values.",
        "Requirement_type": "Non-Functional",
        "Non-Requirement_type": "architecture"
    },
    {
        "Requirement": "The \"AUV_Module\" should define a Primitive Type named \"real\" (for real numbers).",
        "GID": "PT5",
        "Concept": "Primitive Type",
        "Concept_description": "A basic data type defined within the AUV module.",
        "Instance": "real",
        "Instance_of": "Primitive Type",
        "Instance_description": "A primitive type for real numbers.",
        "Requirement_type": "Non-Functional",
        "Non-Requirement_type": "architecture"
    },
    {
        "Requirement": "The \"AUV_Module\" should define a Composite Type named \"SVec\" (Spherical Vector), to record values such as \"radial\" (of type \"real\"), \"polar\" (of type \"real\"), and \"azimuth\" (of type \"real\").",
        "GID": "CT1",
        "Concept": "Composite Type",
        "Concept_description": "A complex data type composed of multiple primitive types.",
        "Instance": "SVec",
        "Instance_of": "Composite Type",
        "Instance_description": "A composite type for spherical vectors.",
        "Requirement_type": "Non-Functional",
        "Non-Requirement_type": "architecture"
    },
    {
        "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
        "GID": "CT2",
        "Concept": "Composite Type",
        "Concept_description": "A complex data type composed of multiple primitive types.",
        "Instance": "Obstacle",
        "Instance_of": "Composite Type",
        "Instance_description": "A composite type for recording obstacle data.",
        "Requirement_type": "Non-Functional",
        "Non-Requirement_type": "architecture"
    },
    {
        "Requirement": "The \"AUV_Module\" should define an Interface named \"Sensors\", which contains the following Values: \"depth\" (of type \"real\"), \"hdng\" (of type \"SVec\") and \"obs\" (of type \"Obstacle\").",
        "GID": "Interface1",
        "Concept": "Interface",
        "Concept_description": "A point of interaction between components within the AUV system.",
        "Instance": "Sensors",
        "Instance_of": "Interface",
        "Instance_description": "An interface containing sensor values.",
        "Requirement_type": "Non-Functional",
        "Non-Requirement_type": "architecture"
    },
    {
        "Requirement": "The \"AUV_Module\" should define an Interface named \"Intpus\", which defines the following Events: \"endTask\" (with no Parameters and no Return Value), \"reqOCM\" (with no Parameters and no Return Value), \"reqMOM\" (with no Parameters and no Return Value), \"reqHCM\" (with no Parameters and no Return Value), \"reqVel\" (with no Parameters, but with a Return Value of type \"real\"), and \"reqHdng\" (with no Parameters, but with a Return Value of type \"real\").",
        "GID": "Interface2",
        "Concept": "Interface",
        "Concept_description": "A point of interaction between components within the AUV system.",
        "Instance": "Intpus",
        "Instance_of": "Interface",
        "Instance_description": "An interface defining input events.",
        "Requirement_type": "Non-Functional",
        "Non-Requirement_type": "architecture"
    },
    {
        "Requirement": "The \"AUV_Module\" should define an Interface named \"Outputs\", which defines the following Events: \"advVel\" (which takes one Parameters of type \"real\", and no Return Value) and \"advHdng\" (which takes one Parameters of type \"real\", and no Return Value).",
        "GID": "Interface3",
        "Concept": "Interface",
        "Concept_description": "A point of interaction between components within the AUV system.",
        "Instance": "Outputs",
        "Instance_of": "Interface",
        "Instance_description": "An interface defining output events.",
        "Requirement_type": "Non-Functional",
        "Non-Requirement_type": "architecture"
    },
    {
        "Requirement": "The \"AUV_Module\" should define an Interface named \"Actuators\", which should remain empty at this point.",
        "GID": "Interface4",
        "Concept": "Interface",
        "Concept_description": "A point of interaction between components within the AUV system.",
        "Instance": "Actuators",
        "Instance_of": "Interface",
        "Instance_description": "An interface for actuators, currently empty.",
        "Requirement_type": "Non-Functional",
        "Non-Requirement_type": "architecture"
    },
    {
        "Requirement": "The \"AUV_Module\" should define a Composite Type named \"Close\", to record the following values: \"horiz_cda\" (of type \"real\"), \"vert_cda\" (of type \"real\"), and \"id\" (of type \"nat\").",
        "GID": "CF3",
        "Concept": "Composite Type",
        "Concept_description": "A complex data type composed of multiple primitive types.",
        "Instance": "Close",
        "Instance_of": "Composite Type",
        "Instance_description": "A composite type for recording close proximity data.",
        "Requirement_type": "Non-Functional",
        "Non-Requirement_type": "architecture"
    },
    {
        "Requirement": "The \"AUV_Module\" shall define a Function named \"odist\", which takes an \"Obstacle\" as input, that returns the distance from the AUV to the Obstacle (as \"real\").",
        "GID": "Platform-F1",
        "Concept": "Function",
        "Concept_description": "A defined operation within the AUV module.",
        "Instance": "odist",
        "Instance_of": "Function",
        "Instance_description": "A function to calculate the distance from the AUV to an obstacle.",
        "Requirement_type": "Functional",
        "Non-Requirement_type": null
    },
    {
        "Requirement": "The \"AUV_Module\" shall define a Function named \"hdist\", which takes an \"Obstacle\" as input, that returns the horizontal distance from the AUV to the Obstacle (as \"real\").",
        "GID": "Platform-F2",
        "Concept": "Function",
        "Concept_description": "A defined operation within the AUV module.",
        "Instance": "hdist",
        "Instance_of": "Function",
        "Instance_description": "A function to calculate the horizontal distance from the AUV to an obstacle.",
        "Requirement_type": "Functional",
        "Non-Requirement_type": null
    },
    {
        "Requirement": "The \"AUV_Module\" shall define a Function named \"vdist\", which takes an \"Obstacle\" as input, that returns the vertical distance from the AUV to the Obstacle (as \"real\").",
        "GID": "Platform-F3",
        "Concept": "Function",
        "Concept_description": "A defined operation within the AUV module.",
        "Instance": "vdist",
        "Instance_of": "Function",
        "Instance_description": "A function to calculate the vertical distance from the AUV to an obstacle.",
        "Requirement_type": "Functional",
        "Non-Requirement_type": null
    }
]