{
    "term_trace": [
        {
            "Role": "Term_checker"
        },
        {
            "Requirement": "The AUV system is developed as a Module named \"AUV_Module\".",
            "GID": "SD1",
            "Concept": "Module",
            "Concept_description": "A component or part of the AUV system.",
            "Instance": "AUV_Module",
            "Instance_of": "Module",
            "Instance_description": "The specific module of the AUV system.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Robotic Platform named \"AUV_Platform\", it should use the Interfaces \"Sensors\" and \"Actuators\".",
            "GID": "SD2",
            "Concept": "RoboticPlatform",
            "Concept_description": "A foundational structure for the AUV's robotic functionalities.",
            "Instance": "AUV_Platform",
            "Instance_of": "RoboticPlatform",
            "Instance_description": "The specific robotic platform within the AUV module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Robotic Platform named \"AUV_Platform\", it should use the Interfaces \"Sensors\" and \"Actuators\".",
            "GID": "SD2",
            "Concept": "Interface",
            "Concept_description": "A point of interaction for the AUV system components.",
            "Instance": "Sensors",
            "Instance_of": "Interface",
            "Instance_description": "Interfaces for detecting environmental factors.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Robotic Platform named \"AUV_Platform\", it should use the Interfaces \"Sensors\" and \"Actuators\".",
            "GID": "SD2",
            "Concept": "Interface",
            "Concept_description": "A point of interaction for the AUV system components.",
            "Instance": "Actuators",
            "Instance_of": "Interface",
            "Instance_description": "Interfaces for executing movements or actions.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Operator\", it should use the Interface \"Inputs\".",
            "GID": "SD3",
            "Concept": "Controller",
            "Concept_description": "A component responsible for managing operations within the AUV.",
            "Instance": "AUV_Operator",
            "Instance_of": "Controller",
            "Instance_description": "The specific controller within the AUV module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Operator\", it should use the Interface \"Inputs\".",
            "GID": "SD3",
            "Concept": "Interface",
            "Concept_description": "A point of interaction for the AUV system components.",
            "Instance": "Inputs",
            "Instance_of": "Interface",
            "Instance_description": "Interface for receiving data or commands.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"LRE_Ctrl\" (for Last Response Engine), it should use the Interfaces \"Inputs\" and \"Outputs\".",
            "GID": "SD4",
            "Concept": "Controller",
            "Concept_description": "A component responsible for managing operations within the AUV.",
            "Instance": "LRE_Ctrl",
            "Instance_of": "Controller",
            "Instance_description": "The specific controller for the Last Response Engine within the AUV module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"LRE_Ctrl\" (for Last Response Engine), it should use the Interfaces \"Inputs\" and \"Outputs\".",
            "GID": "SD4",
            "Concept": "Interface",
            "Concept_description": "A point of interaction for the AUV system components.",
            "Instance": "Inputs",
            "Instance_of": "Interface",
            "Instance_description": "Interface for receiving data or commands.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"LRE_Ctrl\" (for Last Response Engine), it should use the Interfaces \"Inputs\" and \"Outputs\".",
            "GID": "SD4",
            "Concept": "Interface",
            "Concept_description": "A point of interaction for the AUV system components.",
            "Instance": "Outputs",
            "Instance_of": "Interface",
            "Instance_description": "Interface for sending data or results.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Autopilot\", it should use the Interface \"Outputs\".",
            "GID": "SD5",
            "Concept": "Controller",
            "Concept_description": "A component responsible for managing operations within the AUV.",
            "Instance": "AUV_Autopilot",
            "Instance_of": "Controller",
            "Instance_description": "The specific controller for autopilot functionalities within the AUV module.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "\"AUV_Module\" should contain a Controller named \"AUV_Autopilot\", it should use the Interface \"Outputs\".",
            "GID": "SD5",
            "Concept": "Interface",
            "Concept_description": "A point of interaction for the AUV system components.",
            "Instance": "Outputs",
            "Instance_of": "Interface",
            "Instance_description": "Interface for sending data or results.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Platform\" should define a Primitive Type named \"nat\" (for natural numbers).",
            "GID": "PT1",
            "Concept": "PrimitiveType",
            "Concept_description": "A basic data type used within the AUV platform.",
            "Instance": "nat",
            "Instance_of": "PrimitiveType",
            "Instance_description": "A primitive type representing natural numbers.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Platform\" should define a Primitive Type named \"int\" (for integers).",
            "GID": "PT2",
            "Concept": "PrimitiveType",
            "Concept_description": "A basic data type used within the AUV platform.",
            "Instance": "int",
            "Instance_of": "PrimitiveType",
            "Instance_description": "A primitive type representing integers.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Platform\" should define a Primitive Type named \"string\" (for string values).",
            "GID": "PT3",
            "Concept": "PrimitiveType",
            "Concept_description": "A basic data type used within the AUV platform.",
            "Instance": "string",
            "Instance_of": "PrimitiveType",
            "Instance_description": "A primitive type representing string values.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Platform\" should define a Primitive Type named \"boolean\" (for boolean values).",
            "GID": "PT4",
            "Concept": "PrimitiveType",
            "Concept_description": "A basic data type used within the AUV platform.",
            "Instance": "boolean",
            "Instance_of": "PrimitiveType",
            "Instance_description": "A primitive type representing boolean values.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Platform\" should define a Primitive Type named \"real\" (for real numbers).",
            "GID": "PT5",
            "Concept": "PrimitiveType",
            "Concept_description": "A basic data type used within the AUV platform.",
            "Instance": "real",
            "Instance_of": "PrimitiveType",
            "Instance_description": "A primitive type representing real numbers.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Platform\" should define a Composite Type named \"SVec\" (Spherical Vector), to record values such as \"radial\" (of type \"real\"), \"polar\" (of type \"real\"), and \"azimuth\" (of type \"real\").",
            "GID": "CT1",
            "Concept": "CompositeType",
            "Concept_description": "A complex data type composed of multiple primitive types.",
            "Instance": "SVec",
            "Instance_of": "CompositeType",
            "Instance_description": "A composite type representing a spherical vector.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Platform\" should define a Composite Type named \"SVec\" (Spherical Vector), to record values such as \"radial\" (of type \"real\"), \"polar\" (of type \"real\"), and \"azimuth\" (of type \"real\").",
            "GID": "CT1",
            "Concept": "Value",
            "Concept_description": "An element of the composite type.",
            "Instance": "radial",
            "Instance_of": "Value",
            "Instance_description": "A value representing the radial component of the spherical vector.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Platform\" should define a Composite Type named \"SVec\" (Spherical Vector), to record values such as \"radial\" (of type \"real\"), \"polar\" (of type \"real\"), and \"azimuth\" (of type \"real\").",
            "GID": "CT1",
            "Concept": "Value",
            "Concept_description": "An element of the composite type.",
            "Instance": "polar",
            "Instance_of": "Value",
            "Instance_description": "A value representing the polar component of the spherical vector.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Platform\" should define a Composite Type named \"SVec\" (Spherical Vector), to record values such as \"radial\" (of type \"real\"), \"polar\" (of type \"real\"), and \"azimuth\" (of type \"real\").",
            "GID": "CT1",
            "Concept": "Value",
            "Concept_description": "An element of the composite type.",
            "Instance": "azimuth",
            "Instance_of": "Value",
            "Instance_description": "A value representing the azimuth component of the spherical vector.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Platform\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "CompositeType",
            "Concept_description": "A complex data type composed of multiple primitive types.",
            "Instance": "Obstacle",
            "Instance_of": "CompositeType",
            "Instance_description": "A composite type representing an obstacle.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Platform\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "Value",
            "Concept_description": "An element of the composite type.",
            "Instance": "ns_rel_dist",
            "Instance_of": "Value",
            "Instance_description": "A value representing the north-south relative distance of the obstacle.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Platform\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "Value",
            "Concept_description": "An element of the composite type.",
            "Instance": "ew_rel_dist",
            "Instance_of": "Value",
            "Instance_description": "A value representing the east-west relative distance of the obstacle.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Platform\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "Value",
            "Concept_description": "An element of the composite type.",
            "Instance": "depth",
            "Instance_of": "Value",
            "Instance_description": "A value representing the depth of the obstacle.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Platform\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "Value",
            "Concept_description": "An element of the composite type.",
            "Instance": "id",
            "Instance_of": "Value",
            "Instance_description": "A value representing the identifier of the obstacle.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Platform\" should define a Composite Type named \"Obstacle\", to record the following values: \"ns_rel_dist\" (of type \"real\"), \"ew_rel_dist\" (of type real), \"depth\" (of type \"real\"), \"id\" (of type \"real\"), \"obs_hdng\" (of type \"SVec\").",
            "GID": "CT2",
            "Concept": "Value",
            "Concept_description": "An element of the composite type.",
            "Instance": "obs_hdng",
            "Instance_of": "Value",
            "Instance_description": "A value representing the heading of the obstacle, using spherical vector.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "An Interface named \"Sensors\" should be defined, which captures the following values: \"depth\" (of type \"real\"), \"hdng\" (of type \"SVec\") and \"obs\" (of type \"Obstacle\").",
            "GID": "Interface1",
            "Concept": "Interface",
            "Concept_description": "A point of interaction for the AUV system components.",
            "Instance": "Sensors",
            "Instance_of": "Interface",
            "Instance_description": "An interface for capturing sensor data.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "An Interface named \"Sensors\" should be defined, which captures the following values: \"depth\" (of type \"real\"), \"hdng\" (of type \"SVec\") and \"obs\" (of type \"Obstacle\").",
            "GID": "Interface1",
            "Concept": "Value",
            "Concept_description": "An element of the interface.",
            "Instance": "depth",
            "Instance_of": "Value",
            "Instance_description": "A value representing the depth captured by sensors.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "An Interface named \"Sensors\" should be defined, which captures the following values: \"depth\" (of type \"real\"), \"hdng\" (of type \"SVec\") and \"obs\" (of type \"Obstacle\").",
            "GID": "Interface1",
            "Concept": "Value",
            "Concept_description": "An element of the interface.",
            "Instance": "hdng",
            "Instance_of": "Value",
            "Instance_description": "A value representing the heading captured by sensors, using spherical vector.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "An Interface named \"Sensors\" should be defined, which captures the following values: \"depth\" (of type \"real\"), \"hdng\" (of type \"SVec\") and \"obs\" (of type \"Obstacle\").",
            "GID": "Interface1",
            "Concept": "Value",
            "Concept_description": "An element of the interface.",
            "Instance": "obs",
            "Instance_of": "Value",
            "Instance_description": "A value representing the obstacle captured by sensors.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "An Interface named \"Intpus\" should be defined, which receives the following Events: \"endTask\", \"reqOCM\" (with no parameters and no return value), \"reqMOM\" (with no parameters and no return value), \"reqHCM\" (with no parameters and no return value), \"reqVel\" (which returns a value of type \"real\"), and \"reqHdng\" (which returns a value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Interface",
            "Concept_description": "A point of interaction for the AUV system components.",
            "Instance": "Intpus",
            "Instance_of": "Interface",
            "Instance_description": "An interface for receiving input events.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "An Interface named \"Intpus\" should be defined, which receives the following Events: \"endTask\", \"reqOCM\" (with no parameters and no return value), \"reqMOM\" (with no parameters and no return value), \"reqHCM\" (with no parameters and no return value), \"reqVel\" (which returns a value of type \"real\"), and \"reqHdng\" (which returns a value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An action or occurrence recognized by the system.",
            "Instance": "endTask",
            "Instance_of": "Event",
            "Instance_description": "An event indicating the end of a task.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "An Interface named \"Intpus\" should be defined, which receives the following Events: \"endTask\", \"reqOCM\" (with no parameters and no return value), \"reqMOM\" (with no parameters and no return value), \"reqHCM\" (with no parameters and no return value), \"reqVel\" (which returns a value of type \"real\"), and \"reqHdng\" (which returns a value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An action or occurrence recognized by the system.",
            "Instance": "reqOCM",
            "Instance_of": "Event",
            "Instance_description": "An event requesting operation control mode.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "An Interface named \"Intpus\" should be defined, which receives the following Events: \"endTask\", \"reqOCM\" (with no parameters and no return value), \"reqMOM\" (with no parameters and no return value), \"reqHCM\" (with no parameters and no return value), \"reqVel\" (which returns a value of type \"real\"), and \"reqHdng\" (which returns a value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An action or occurrence recognized by the system.",
            "Instance": "reqMOM",
            "Instance_of": "Event",
            "Instance_description": "An event requesting mission operation mode.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "An Interface named \"Intpus\" should be defined, which receives the following Events: \"endTask\", \"reqOCM\" (with no parameters and no return value), \"reqMOM\" (with no parameters and no return value), \"reqHCM\" (with no parameters and no return value), \"reqVel\" (which returns a value of type \"real\"), and \"reqHdng\" (which returns a value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An action or occurrence recognized by the system.",
            "Instance": "reqHCM",
            "Instance_of": "Event",
            "Instance_description": "An event requesting heading control mode.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "An Interface named \"Intpus\" should be defined, which receives the following Events: \"endTask\", \"reqOCM\" (with no parameters and no return value), \"reqMOM\" (with no parameters and no return value), \"reqHCM\" (with no parameters and no return value), \"reqVel\" (which returns a value of type \"real\"), and \"reqHdng\" (which returns a value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An action or occurrence recognized by the system.",
            "Instance": "reqVel",
            "Instance_of": "Event",
            "Instance_description": "An event requesting velocity, returning a real value.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "An Interface named \"Intpus\" should be defined, which receives the following Events: \"endTask\", \"reqOCM\" (with no parameters and no return value), \"reqMOM\" (with no parameters and no return value), \"reqHCM\" (with no parameters and no return value), \"reqVel\" (which returns a value of type \"real\"), and \"reqHdng\" (which returns a value of type \"real\").",
            "GID": "Interface2",
            "Concept": "Event",
            "Concept_description": "An action or occurrence recognized by the system.",
            "Instance": "reqHdng",
            "Instance_of": "Event",
            "Instance_description": "An event requesting heading, returning a real value.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "An Interface named \"Outputs\" should be defined, which outputs the following Events: \"advVel\" (which takes a parameter of type real, and returns no value) and \"advHdng\" (which takes a parameter of type \"real\", and returns no value).",
            "GID": "Interface3",
            "Concept": "Interface",
            "Concept_description": "A point of interaction for the AUV system components.",
            "Instance": "Outputs",
            "Instance_of": "Interface",
            "Instance_description": "An interface for outputting events.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "An Interface named \"Outputs\" should be defined, which outputs the following Events: \"advVel\" (which takes a parameter of type real, and returns no value) and \"advHdng\" (which takes a parameter of type \"real\", and returns no value).",
            "GID": "Interface3",
            "Concept": "Event",
            "Concept_description": "An action or occurrence recognized by the system.",
            "Instance": "advVel",
            "Instance_of": "Event",
            "Instance_description": "An event for advising velocity, taking a real parameter.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "An Interface named \"Outputs\" should be defined, which outputs the following Events: \"advVel\" (which takes a parameter of type real, and returns no value) and \"advHdng\" (which takes a parameter of type \"real\", and returns no value).",
            "GID": "Interface3",
            "Concept": "Event",
            "Concept_description": "An action or occurrence recognized by the system.",
            "Instance": "advHdng",
            "Instance_of": "Event",
            "Instance_description": "An event for advising heading, taking a real parameter.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "An Interface named \"Actuators\" should be defined, which should remain empty at this point.",
            "GID": "Interface4",
            "Concept": "Interface",
            "Concept_description": "A point of interaction for the AUV system components.",
            "Instance": "Actuators",
            "Instance_of": "Interface",
            "Instance_description": "An interface that is currently empty.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Platform\" should define a Composite Type named \"Close\", to record the following values: \"horiz_cda\" (of type \"real\"), \"vert_cda\" (of type \"real\"), and \"id\" (of type \"nat\").",
            "GID": "CF3",
            "Concept": "CompositeType",
            "Concept_description": "A complex data type composed of multiple primitive types.",
            "Instance": "Close",
            "Instance_of": "CompositeType",
            "Instance_description": "A composite type representing proximity data.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Platform\" should define a Composite Type named \"Close\", to record the following values: \"horiz_cda\" (of type \"real\"), \"vert_cda\" (of type \"real\"), and \"id\" (of type \"nat\").",
            "GID": "CF3",
            "Concept": "Value",
            "Concept_description": "An element of the composite type.",
            "Instance": "horiz_cda",
            "Instance_of": "Value",
            "Instance_description": "A value representing the horizontal component of the proximity data.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Platform\" should define a Composite Type named \"Close\", to record the following values: \"horiz_cda\" (of type \"real\"), \"vert_cda\" (of type \"real\"), and \"id\" (of type \"nat\").",
            "GID": "CF3",
            "Concept": "Value",
            "Concept_description": "An element of the composite type.",
            "Instance": "vert_cda",
            "Instance_of": "Value",
            "Instance_description": "A value representing the vertical component of the proximity data.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Platform\" should define a Composite Type named \"Close\", to record the following values: \"horiz_cda\" (of type \"real\"), \"vert_cda\" (of type \"real\"), and \"id\" (of type \"nat\").",
            "GID": "CF3",
            "Concept": "Value",
            "Concept_description": "An element of the composite type.",
            "Instance": "id",
            "Instance_of": "Value",
            "Instance_description": "A value representing the identifier of the proximity data.",
            "Requirement_kind": "Non-Functional",
            "Non-Requirement_type": "architecture"
        },
        {
            "Requirement": "The \"AUV_Platform\" shall provide a Function named \"odist\", which takes an \"Obstacle\" as input, that returns the distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F1",
            "Concept": "Function",
            "Concept_description": "A specific operation or calculation performed by the AUV platform.",
            "Instance": "odist",
            "Instance_of": "Function",
            "Instance_description": "A function to calculate the distance from the AUV to an obstacle.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Platform\" shall provide a Function named \"odist\", which takes an \"Obstacle\" as input, that returns the distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F1",
            "Concept": "Obstacle",
            "Concept_description": null,
            "Instance": "Obstacle",
            "Instance_of": "Obstacle",
            "Instance_description": "An input to the function representing an obstacle.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Platform\" shall provide a Function named \"odist\", which takes an \"Obstacle\" as input, that returns the distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F1",
            "Concept": "PrimitiveType",
            "Concept_description": null,
            "Instance": "real",
            "Instance_of": "PrimitiveType",
            "Instance_description": "The return type of the function representing the distance.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Platform\" shall provide a Function named \"hdist\", which takes an \"Obstacle\" as input, that returns the horizontal distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F2",
            "Concept": "Function",
            "Concept_description": "A specific operation or calculation performed by the AUV platform.",
            "Instance": "hdist",
            "Instance_of": "Function",
            "Instance_description": "A function to calculate the horizontal distance from the AUV to an obstacle.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Platform\" shall provide a Function named \"hdist\", which takes an \"Obstacle\" as input, that returns the horizontal distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F2",
            "Concept": "Obstacle",
            "Concept_description": null,
            "Instance": "Obstacle",
            "Instance_of": "Obstacle",
            "Instance_description": "An input to the function representing an obstacle.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Platform\" shall provide a Function named \"hdist\", which takes an \"Obstacle\" as input, that returns the horizontal distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F2",
            "Concept": "PrimitiveType",
            "Concept_description": null,
            "Instance": "real",
            "Instance_of": "PrimitiveType",
            "Instance_description": "The return type of the function representing the horizontal distance.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Platform\" shall provide a Function named \"vdist\", which takes an \"Obstacle\" as input, that returns the vertical distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F3",
            "Concept": "Function",
            "Concept_description": "A specific operation or calculation performed by the AUV platform.",
            "Instance": "vdist",
            "Instance_of": "Function",
            "Instance_description": "A function to calculate the vertical distance from the AUV to an obstacle.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Platform\" shall provide a Function named \"vdist\", which takes an \"Obstacle\" as input, that returns the vertical distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F3",
            "Concept": "Obstacle",
            "Concept_description": null,
            "Instance": "Obstacle",
            "Instance_of": "Obstacle",
            "Instance_description": "An input to the function representing an obstacle.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        },
        {
            "Requirement": "The \"AUV_Platform\" shall provide a Function named \"vdist\", which takes an \"Obstacle\" as input, that returns the vertical distance from the AUV to the Obstacle (as \"real\").",
            "GID": "Platform-F3",
            "Concept": "PrimitiveType",
            "Concept_description": null,
            "Instance": "real",
            "Instance_of": "PrimitiveType",
            "Instance_description": "The return type of the function representing the vertical distance.",
            "Requirement_kind": "Functional",
            "Non-Requirement_type": null
        }
    ]
}