Based on the provided requirements, I will create a state machine named "LRE_Beh" that models the behavior of the LRE. This state machine will include the defined states, transitions, variables, constants, events, and functions. Here is the DSL code:

```plaintext
stm LRE_Beh {
    // Required Interfaces
    requires AUV_Platform

    // Variables
    var cobs: Close
    var inOPEZ: boolean
    var hvel: real
    var vvel: real
    var cstc: Obstacle
    var cdyn: Obstacle
    var depth: real
    var CDA: real
    var TCPA: real
    var x: real

    // Constants
    const AvoidanceMargin: real
    const StaticObsHorizDist: real
    const StaticObsVertDist: real
    const StaticObsDfltVertDist: real
    const MinSafeDist: real

    // Events
    event reqVel
    event advVel
    event reqHdng
    event advHdng
    event reqMOM
    event reqOCM
    event reqHCM
    event endTask

    // Functions
    function odist(o: Obstacle): real {}
    function hdist(o: Obstacle): real {}
    function vdist(o: Obstacle): real {}

    // Initial State
    initial i0

    // States
    state OCM {
        // Transitions within OCM
        transition t1 {
            from OCM
            to OCM
            trigger reqVel ? x
            action advVel ! x
        }
        transition t2 {
            from OCM
            to OCM
            trigger reqHdng ? x
            action advHdng ! x
        }
    }

    state MOM {
        entry advVel ! 1
        // Transitions from MOM
        transition t5 {
            from MOM
            to OCM
            condition inOPEZ
        }
        transition t6 {
            from MOM
            to OCM
            trigger reqOCM
        }
        transition t7 {
            from MOM
            to OCM
            trigger endTask
            action advVel ! 0
        }
        transition t8 {
            from MOM
            to CAM
            condition CDA < MinSafeDist /\ TCPA >= 0
        }
        transition t9 {
            from MOM
            to HCM
            condition hvel >= 0.1 /\ hdist(cstc) < StaticObsHorizDist
        }
        transition t10 {
            from MOM
            to HCM
            condition vdist(cstc) <= StaticObsDfltVertDist
        }
        transition t11 {
            from MOM
            to HCM
            condition vvel >= 0.1 /\ vdist(cstc) < StaticObsVertDist
        }
        transition t12 {
            from MOM
            to HCM
            trigger reqHCM
        }
    }

    state CAM {
        // Transitions from CAM
        transition t17 {
            from CAM
            to OCM
            trigger reqOCM
        }
        transition t18 {
            from CAM
            to OCM
            condition CDA >= MinSafeDist
        }
    }

    state HCM {
        entry advVel ! 0.1
        // Transitions from HCM
        transition t13 {
            from HCM
            to MOM
            condition hdist(cstc) > StaticObsHorizDist /\ vdist(cstc) > StaticObsVertDist
        }
        transition t14 {
            from HCM
            to CAM
            condition CDA < MinSafeDist /\ TCPA >= 0
        }
        transition t15 {
            from HCM
            to OCM
            trigger reqOCM
        }
        transition t16 {
            from HCM
            to OCM
            condition inOPEZ
        }
    }

    // Initial Transition
    transition t0 {
        from i0
        to OCM
    }

    // Transition from OCM to MOM
    transition t4 {
        from OCM
        to MOM
        trigger reqMOM
        condition vel < 0.1 /\ odist(cdyn) > 7.5 /\ odist(cstc) > 0.3 /\ !inOPEZ
    }
}
```

### Explanation:
- **States**: The state machine includes states OCM, MOM, CAM, and HCM, each with specific entry actions and transitions.
- **Transitions**: Transitions are defined with triggers, conditions, and actions as specified in the requirements.
- **Variables and Constants**: Variables and constants are defined as per the non-functional requirements.
- **Events**: Events are defined and used as triggers for transitions.
- **Functions**: Functions `odist`, `hdist`, and `vdist` are defined to calculate distances as required.

This code captures the behavior of the LRE as described in the functional and non-functional requirements.